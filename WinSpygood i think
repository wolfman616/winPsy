#NoEnv		;;__winc3_Pi3;;_-WinS_pi_(M)_-_Window-Info-Tool__::	
#MaxMem	640	;;__Fork3d_n_bork3d_by_M.Wolff__2020__-__2022_-__::	
#notrayicon
#KeyHistory	0
#SingleInstance,	Off
detectHiddenWindows	On
detectHiddenText,	On
setTitleMatchMode,	2
setTitleMatchMode,	Slow
OnMessage(0x0201,"WM_LrBUTTONDOWN")
OnMessage(0x4a,"Receive_WM_COPYDATA")
OnExit("exitfunc") ; OnMessage(6,"activ8") wm_activate
AppName:= "wince Pie"
singleton_check(PID:= DllCall("GetCurrentProcessId"))
setWorkingDir,% A_ScriptDir
coordMode,Mouse,Screen
setBatchLines,	-1
setControlDelay,-1
setWinDelay,	-1
listlines,Off
	gosub("Menuz")
,	gosub("ini_R"),	gosub("Varz")
,	gosub("Spy") ;	OnMessage(0x6,"col") ;wm_activate
return,

SetStyle:
SetXStyl:
SetClass:
SetCtrlN:
return,

CloseButtHandler:
gui,-dpiscale
gui,Add,Picture,w40 h40 x536 y0,Untitled2.png
gui,+dpiscale
WinSet,Redraw,,ahk_id %hSpyWnd%
sleep,9003
Win_Animate(hSpyWnd,"hide blend",1200)
sleep,900
sleep,900
exitapp,
return,

Spy: ;Main window;
	gui,Spy:New,LabelSpy hWndhSpyWnd +alwaysontop +lastfound +toolwindow +0x40000 -0x480000 ;0x94CC004C ;e0x00010101
	hSmIcon:= LoadPicture("C:\Icon\24\winspy_24.ico","w24 Icon" . Index,ErrorLevel)
	hLgIcon:= LoadPicture("C:\Icon\48_24\WINSPY48_24.ico","w48 Icon" . Index,ErrorLevel)
	SendMessage,0x80,0,hSmIcon,,ahk_id %hWnd% ; WM_SETICON,ICON_SMALL
	SendMessage,0x80,1,hLgIcon,,ahk_id %hWnd% ; WM_SETICON,ICON_LARGE
	gui,Font,s9,continuum light
	gui,-dpiscale
	gui,Add,Picture,	hWndhFindTool gFindToolHandler w48 h48 x18 y4,% Bitmap1
	gui,Add,Picture,	hWndhCloseButt gCloseButtHandler w40 h40 x536 y0,% "Untitled.png"
	gui,+dpiscale
	gui,Add,Picture,	x44 y%pbanner_yoff%,%  "C:\Users\ninj\Desktop11\butts\buttonj.png"
	gui,Add,CheckBox,	gSetDHW x260 y2 Checked%g_DetectHiddn%,% "&Detect Hidden"
	gui,Add,CheckBox,	vg_Minimize gSetMinimize x260 y20 Checked%g_Minimize%,% "Compact &Mode"
	gui,Add,Tab3,hWndhTab vTab gTabHandler x10 y38 w365 h388 AltSubmit -Wrap +e0x2000000 +0x2000000
	,%	"General|Process|Details|Messages|Extra|Windows|Styles"
gui,Tab,1 ;General;
	gui,Add,Text,	x24 y92 w66 h23 +0x000200,%			"c/hWnd:"
	gui,Add,Edit,	vEdtHandle2 gSetHandle x90 y94 w82 h21 +0x1
	gui,Add,Edit,	vEdtHandle gSetHandle x181 y94 w82 h21 +0x1
	gui,Add,Button, vBtnSetText gSetText x277 y94 w83 h23,%	"Set Text"
	gui,Add,Text,	vTxtText x24 y66 w66 h21 +0x200,%		"WinText:"
	gui,Add,Edit,	vEdtText x90 y68 w269 h21 -E0x200 ;+0x1
	gui,Add,Button,	hWndhBtnCommands gShowCommandsMenu x277 y120 w83 h23,% "Commands:"
	gui,Add,Text,	x24 y122 w62 h21 +0x200,%			"Proc:"
	gui,Add,Edit,	vEdtHandle3 gSetHandle x90 y123 w174 h21 -E0x200
	gui,Add,Text,	x24 y150 w62 h21 +0x200,%			"WinClass:"
	gui,Add,Edit,	vEdtClass gSetClass x90 y154 w270 h21 -E0x200
	gui,Add,Text,	x24 y179 w62 h21 +0x200,%			"CtrlClass:"
	gui,Add,Edit,	vEdtClassNN gSetCtrlN x90 y183 w270 h21 -E0x200
	gui,Add,Text,	x24 y207 w62 h21 +0x200,%			"S/exStyle:"
	gui,Add,Edit,	vEdtStyle gSetStyle x90 y210 w80 h21 -E0x200 +0x1
	gui,Add,Edit,	vEdtExStyle gSetXStyl x185 y209 w80 h21 -E0x200
	gui,Add,Text,	x70 y242 w285 0x10
	gui,Add,Text,	x24 y234 w62 h21 +0x200,%			"Position:"
	gui,Add,Edit,	vEdtPosition x90 y269 w150 h21 -E0x200 ReadOnly
	gui,Add,Button,	gShowXYWHDlg x277 y278 w83 h23,%	"Change..."
	gui,Add,Text,	x24 y280 w62 h21 +0x200,%			"Size:"
	gui,Add,Edit,	vEdtSize x90 y250 w150 h21 -E0x200 	ReadOnly
	gui,Add,Text,	x66 y292 w200 0x10
	gui,Add,Text,	x24 y310 w62 h21 +0x200,%			"Args:"
	gui,Add,Edit,	vcmdline x60 y314 w299 h21 -E0x200 	ReadOnly
	gui,Add,Text,	x24 y340 w62 h21 +0x200,%			"Architecture:"
	gui,Add,Edit,	vArch x90 y344 w100 h21 -E0x200 	ReadOnly
	gui,Add,Text,	x200 y340 w62 h21 +0x200,%			"Codepage:" 
	gui,Add,Edit,	vvcodepage x277 y344 w100 h21 -E0x200 ReadOnly
	gui,Add,Text,	x24 y370 w62 h21 +0x200,%			"DPI Context:"
	gui,Add,Edit,	vDpicontxt  x90 y374 w144 h21 -E0x200 ReadOnly 	;gui Add,Text,x24 y368 w80 h21 +0x200,Cursor:	;gui Add,Edit,vEdtCursor x90 y372 w180 h21 -E0x200 ReadOnly	;gui Add,DropDownList,vMouseCoordMode gSetMouseCoordMode x297 y368 w83,Client|Window|Screen||
gui,Tab,2 ;Process;
	gui,Add,Picture,vProgIcon x21 y82 w32 h32 Icon3,% "shell32.dll"
	gui,Add,Text,vProgName x60 y82 w180 h20,% "N/A"
	gui,Add,Text,vProgVer x60 y96 w180 h20 +0x200
	gui,Add,ListView,hWndhProcInfo x21 y120 w360 h257 +LV0x14000,% "Property|Value"
	LV_ModifyCol(1,100), LV_ModifyCol(2,256)
	gui,Add,Button,gEndProcess x21 y386 w83 h23,% "End Process"
	gui,Add,Button,gOpenFolder x110 y386 w83 h23,% "Open Folder"
gui,Tab,3 ;Details;
	gui,Add,ListView,hWndhClassInfo x21 y84 w360 h200 +LV0x14000,% "Property|Value"
	LV_ModifyCol(1,138), LV_ModifyCol(2,201)
	gui,Add,Text,x21 y288 w360 h20,% "Window Properties:"
	gui,Add,ListView,hWndhPropInfo x21 y306 w360 h104 +LV0x14000,% "Property|Data"
	LV_ModifyCol(1,238), LV_ModifyCol(2,100)
gui,Tab,4 ;Messages
	gui,Add,Text,x30 y94 w63 h23 +0x200,% "Message:"
	gui,Add,ComboBox,hWndhCbxMsg vCbxMessages x105 y94 w182
	SendMessage 0x1701,20,0,,ahk_id %hCbxMsg% ; CB_SETMINVISIBLE
	gui,Add,Link,gGoogleSearch x299 y97 w78 h23,% "<a>Google Search</a>"
	gui,Add,Text,x30 y127 w63 h23 +0x200,% "wParam:"
	gui,Add,Edit,vwParam x105 y127 w182 h23
	gui,Add,DropDownList,vwParamType x297 y126 w78,% "Number||String"
	gui,Add,Text,x30 y161 w63 h23 +0x200,% "lParam:"
	gui,Add,Edit,vlParam x105 y161 w182 h23
	gui,Add,DropDownList,vlParamType x297 y160 w78,% "Number||String"
	gui,Add,Button,gSendMsg x97 y206 w99 h24,% "SendMessage"
	gui,Add,Button,gPostMsg x203 y206 w99 h24,% "PostMessage"
	gui,Add,GroupBox,x84 y242 w232 h51 Center,% "Result"
	gui,Add,Edit,vResult x103 y264 w195 h21 Center -E0x200 ReadOnly
	gui,Add,Picture,x58 y390 w16 h16 +Icon2,% "user32.dll"
	gui,Add,Text,x80 y390 w290 h23,% "Some messages may crash the target application."
gui,Tab,5 ;Extra;
	gui,Add,ListView,hWndhExtraInfo x21 y84 w360 h261 +LV0x14000,% "Property|Value"
	gui,Add,Button,hWndhBtnMenu gShowMenuViewer x21 y355 w83 h23,% "Menu..."
	gui,Add,Button,gShowScrollBarInfo x21 y387 w83 h23,% "Scroll Bars..."
gui,Tab,6 ;Windows;
	gui,Add,Custom,ClassSysTabControl32 hWndhWindowsTab gWindowsTabHandler x21 y85 w360 h255
	Tab_AddItem(hWindowsTab,"Child Windows")
	Tab_AddItem(hWindowsTab,"Sibling Windows")
	gui,Add,ListView,hWndhChildList gChildListHandler x28 y116 w344 h214 -E0x200 +LV0x14000
	,% "Handle|Class Name|Window Text"
	LV_ModifyCol(1,76), LV_ModifyCol(2,113), LV_ModifyCol(3,136)
	gui,Add,ListView,hWndhSiblingList gSiblingListHandler x28 y116 w344 h214 -E0x200 +LV0x14000 Hidden
	,% "Handle|Class Name|Window Text"
	LV_ModifyCol(1,76), LV_ModifyCol(2,113), LV_ModifyCol(3,136)
	gui,Add,Text,x33 y352 w48 h23 +0x200,% "Parent:"
	gui,Add,Link,vParentLink gLinkToHandle x87 y357 w300 h20,<a>0x00000000</a>
	gui,Add,Text,x33 y380 w48 h23 +0x200,% "Owner:"
	gui,Add,Link,vOwnerLink gLinkToHandle x87 y385 w300 h20,<a>0x00000000</a>
gui,Tab,7 ;Styles;
;gui,Add,Custom,ClassSysTabControl32 hWndhStylesTab gStylesTabHandler x13 y60 w360 h264
	gui,Add,Custom,ClassSysTabControl32 hWndhStylesTab gStylesTabHandler e0x400000 x13 y60 w360 h264
	Tab_AddItem(hStylesTab,"Styles")
	Tab_AddItem(hStylesTab,"Extended Styles")
	; ListBox style +0x108: no integral height and simplified multiple selection
	gui,Add,ListBox
		,hWndhLbxStyles vLbxStyles gLbxStylesHandler x58 y83 w312 h232 +0x108 +e0x4000 -E0x200  T100
	gui,Add,ListBox
		,hWndhLbxExStyles vLbxExStyles gLbxStylesHandler x58 y83 w312 h232 +0x108 +e0x4000 -E0x200  T100
	gui,Add,ListBox
		,hWndhLbxExtraStyles vLbxExtraStyles gLbxStylesHandler x58 y83 w312 h232 +0x108 +e0x4000 -E0x200  T100 Hidden
	gui,Add,GroupBox,vGrpDesc x21 y326 w256 h90,Description
	gui,Add,Text,	vTxtDesc gShowDescription x28 y350 w245 h69 +0x80,Left/Right-click an item to see its description.
	gui,Add,Edit,	vEdtStyleSum x286 y333 w83 h20,0x00000000
	gui,Add,Edit,	vEdtExStyleSum x286 y333 w83 h20 Hidden,0x00000000
	gui,Add,Edit,	vEdtExtraStyleSum x286 y333 w83 h23 Hidden,0x00000000
	gui,Add,Button,	gApplyStyle x287 y364 w80 h22,@pply
											 
											   
												  
	winset,exstyle,+0x2000000,ahk_id %hLbxStyles%
	winset,exstyle,+0x2000000,ahk_id %hLbxExStyles%
	winset,exstyle,+0x2000000,ahk_id %hLbxExtraStyles% w80 h22,@pply
	gui,Add,Button,gResetStyle x287 y394 w80 h22,Reset
	ToolbarInit()

gui,Tab ;main-butt-sect;
gui,Add,Button,	hWndhBtnOpts gShowSettingsDlg x10 y432 w24 h24
gui,Add,Button,	gShowFindDlg x39 y432 w84 h24,% "&Find..."
gui,Add,Button,	gShowTree x128 y432 w84 h24,% "&Tree..."
gui,Add,Button,	gCopyToClipboard x284 y432 w84 h24,% "&Copy"
gui,Add,Button,	gScreenshot x216 y432 w64 h24,% "&Screenshot"
SetButtonIcon(hBtnOpts,ResDir "\Settings.ico")

; Show main window
IniRead,px,%IniFile%,Settings,x,Center
IniRead,py,%IniFile%,Settings,y,Center
gui,+lastfound -Resize +MaxSize384x483 +MinSize384x483
winset,style,+0x40000
sbhn:= statusbarinit()
gui,Show,x%px% y%py% w384 h483 Hide,% AppName ; Show main window
if(g_Minimize) {
	WinMove,ahk_id %hSpyWnd%,,,,,78
	, g_Minimized:= True
}

gui,-dpiscale
gui,Show,,% AppName ;winset,style,+0x80000,ahk_id %hTab% ;winset,style,+0x8000,ahk_id %hTab%
alien:= ico2hicon("C:\Icon\24\ALIUMM_24_2.ICO")
SendMessage,0x40F,0,% alien,,ahk_id %sbhn%
gui,+dpiscale
sleep,900
SetExplorerTheme(hClassInfo)
SetExplorerTheme(hPropInfo)
SetExplorerTheme(hExtraInfo)
SetExplorerTheme(hChildList)
SetExplorerTheme(hSiblingList)
SetExplorerTheme(hProcInfo)

; Commands menu
Menu,CommandsMenu,Add,Visible,menHandl4
Menu,CommandsMenu,Add,Enabled,menHandl4
Menu,CommandsMenu,Add,Always on Top,menHandl4
Menu,CommandsMenu,Add
Menu,CommandsMenu,Add,Redraw Window,menHandl4
Menu,CommandsMenu,Add
Menu,CommandsMenu,Add,Close Window,	menHandl4
	hCommandsMenu:= MenuGetHandle("CommandsMenu")
RegRead,Sep,HKEY_CURRENT_USER\Control Panel\International,sThousand
((Sep="")? Sep:= ".")
OnMessage(0x100,"OnWM_KEYDOWN")
OnMessage(0x112,"OnWM_SYSCOMMAND")
OnMessage(0x200,"OnWM_MOUSEMOVE")
OnMessage(0x202,"OnWM_LBUTTONUP")
OnMessage(0x204,"OnWM_RBUTTONDOWN")
LoadCursors()
hSysMenu:= DllCall("GetSystemMenu","Ptr",hSpyWnd,"Int",False,"Ptr")
DllCall("InsertMenu","Ptr",hSysMenu,"UInt",5,"UInt",0x400,"UPtr",0xC0DE,"Str","About...")
DllCall("InsertMenu","Ptr",hSysMenu,"UInt",5,"UInt",0xC00,"UPtr",0,"Str","") ; Separator
BalloonTip("drag here...`n   `;-)",25,24,true,4)
sleep,2000
gui,Add,Picture,x44 y%pbanner_yoff%,% Close_Butt:= "C:\Users\ninj\Desktop11\butts\buttonj.png"
gui,Color,000000
return, ;End of auto-execute section;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ToolbarInit() { ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	global hStylesTab,hSpyWnd
	ControlGet,hTB,hwnd,,ToolbarWindow321,ahk_id %hSpyWnd%
	DllCall("SetParent","ptr",htb,"ptr",hStylesTab)
	SendMessage,0x43C,0,0,,ahk_id %hTB%	;	TB_SETMAXTEXTROWS ;text omitted from bar; ;note: if more than one button has the same idCommand, then only the last button with that idCommand will proceed with call.
	Toolbarupdate()
}

Toolbarupdate(il=1) {
	global SYSGUI_TBbUTTSZ,TBBUTTON
	global hTB, vCount,	vMsg
	hIL:= IL_init(il),	vMsg:= A_IsUnicode? 0x444:0x414 ;TB_ADDBUTTONSW=0x444, TB_ADDBUTTONSA=0x414
	SendMessage,0x430,0,% hIL,,ahk_id %hTB% ;TB_SETIMAGELIST=0x430 
	SendMessage,% vMsg,% vCount,% &TBBUTTON,,% "ahk_id " hTB ;TB_ADDBUTTONSW/TB_ADDBUTTONSA
	Toolbar_SetButtSize(hTB,SYSGUI_TBbUTTSZ,SYSGUI_TBbUTTSZ)
	winset,style,+0x110,ahk_id %hTB%
	TBRePos()
	SendMessage,0x454,0,0x94,,ahk_id %hTB%
}

tb2() {
	Gui,Add,Custom,ClassToolbarWindow32 0x100	;TBSTYLE_TOOLTIPS=0x100
	ControlGet,hTB,Hwnd,,ToolbarWindow321,% "ahk_id " hStylesTab 
	DllCall("SetParent","ptr",htb,"ptr",hSpyWnd )
	SendMessage,0x43C,0,0,,% "ahk_id " hTB	;TB_SETMAXTEXTROWS ;text omitted from buttons
	vCount:= 6, vSize:= A_PtrSize=8? 32:20	;note: if more than one button has the same idCommand, only last button with idCommand will have ToolTip
	VarSetCapacity(TBBUTTON,vCount*vSize,0)
	Loop,% vCount {
		vText%A_Index%:= "TB " A_Index, vOffset:= (A_Index-1)*vSize
		NumPut(A_Index-1,TBBUTTON,vOffset,	 "Int")	;iBitmap
		NumPut(A_Index-1,TBBUTTON,vOffset +4,"Int")	;idCommand ;TBSTATE_ENABLED=4
		NumPut(0x4,TBBUTTON,vOffset+8,"UChar")		;fsState
		NumPut(&vText%A_Index%,TBBUTTON,vOffset+(A_PtrSize=8? 24:16),"Ptr") ;iString
	}
	hIL:= IL_Create(5,2,0)
	IL_Add(hIL,A_AhkPath,-159)	;green H
	IL_Add(hIL,A_AhkPath,-206)	;green S
	IL_Add(hIL,A_AhkPath,-207)	;red H
	IL_Add(hIL,A_AhkPath,-208)	;red S
	IL_Add(hIL,A_AhkPath,-160)	;file icon
	SendMessage,0x430,0,% hIL,,% "ahk_id " hTB	;TB_SETIMAGELIST
	vMsg:= A_IsUnicode? 0x444:0x414				;TB_ADDBUTTONSW=0x444 ;TB_ADDBUTTONSA=0x414
	SendMessage,% vMsg,% vCount,% &TBBUTTON,,% "ahk_id " hTB ;TB_ADDBUTTONSW/TB_ADDBUTTONSA
}

IL_init(il=1) {
	global
	icon1:= "C:\Script\AHK\- Script\WinSpy\winctrls3.ico,C:\Script\AHK\- Script\WinSpy\hv48.ico,C:\Script\AHK\- Script\WinSpy\borderthick.ico,C:\Script\AHK\- Script\WinSpy\eye48.ico,C:\Script\AHK\- Script\WinSpy\menu48.ico,C:\Script\AHK\- Script\WinSpy\DISABLED_48.ICO"	
	icon2:= "C:\Script\AHK\- Script\WinSpy\winctrls3.ico,C:\Script\AHK\- Script\WinSpy\hv48.ico,C:\Script\AHK\- Script\WinSpy\borderthick.ico,C:\Script\AHK\- Script\WinSpy\eye48.ico,C:\Script\AHK\- Script\WinSpy\menu48.ico,C:\Icon\48\disabled2_483.ico"	
	icon3:= "C:\Script\AHK\- Script\WinSpy\winctrls3.ico,C:\Script\AHK\- Script\WinSpy\hv48.ico,C:\Script\AHK\- Script\WinSpy\borderthick.ico,C:\Script\AHK\- Script\WinSpy\eye48.ico,C:\Script\AHK\- Script\WinSpy\menu48.ico,C:\Icon\48\disabled2_483.ico"
	icon_array:= []
	icon_array.push(icon%il%)
	loop,parse,% icon%il%,`,
		icon_array[ max_i:= A_index ]:= A_loopfield
	for,i,icopath in icon_array	;iBitmap
		IL_Add(hIL2,icopath,0)	;idCommand
	max_i>6? vCount:= 6 : vCount:= max_i
	hIL2:= IL_Create(vCount,2,64),	vSize:= A_PtrSize=8? 32:20
	VarSetCapacity(TBBUTTON,vCount*vSize,0)
	Loop,% vCount {
		switch a_index {
			case 1 : (vTxt%A_Index%):= "Home is where the fart is..."
			default : (vTxt%A_Index%):= "       Cut-em-up!!`nI-can-dance-all-day!!!"
		}
		vOffset:= (A_Index -1) *vSize
		NumPut(A_Index-1,		TBBUTTON,vOffset,	"Int")
		NumPut(A_Index-1,		TBBUTTON,vOffset+4,	"Int")
		NumPut(0x4,				TBBUTTON,vOffset+8,	"UChar")
		NumPut(&vTxt%A_Index%,	TBBUTTON,vOffset+(A_PtrSize=8? 24:16),"Ptr") ;iString
	} ; hIL2:= IL_Create(5, 2, 64)
	for,i,icopath in icon_array				;iBitmap
		IL_Add(hIL2,icopath,0) 				;idCommand
	tabicons_init:= []			;fsState	;TBSTATE_ENABLED:= 4
	loop,4									;str=tabicons_init.push("ahk" . a_index)
		tabicons_init.push("ahk" . a_index)	;loop(6,str)
	hIL1:= TAB_CreateImageList(32) 			;Create and populate image list
	for,i,f in tabicons_init
		IL_Add(hIL1,IcoDir . "\" . f . ".ico")
	return,byref hIL2
}

statusbarinit() {
	global
	static inc:= 452
	Gui,Add,StatusBar,+hWndSbarhWnd +e0x2080000
	winget,fp,processpath,ahk_id %hspywnd%
	SB_SetParts(inc,inc)
	loop,2
		SB_SetText(fp,1)
	,	SB_SetText(hspywnd,2)
	return,SbarhWnd
}

^h::
tbrepos()
return,

TBRePos() {
	global
	win_move(htb,220,34.70,200,"")
	SendMessage,0x454,0,0x94,,ahk_id %hTB%
}

Toolbar_SetButtSize(hCtrl,W,H="") {
	static TB_SETBUTTONSIZE=0x41F
	IfEqual,H,,SetEnv,H,% W
	SendMessage,TB_SETBUTTONSIZE,,(H<<16)|W,,ahk_id %hCtrl%
	SendMessage,0x421,,,,ahk_id %hCtrl%	;autosize
}

~space::
PostMessage,0x0202,0,0,,ahk_id %hSpyWnd% ;WM_LBUTTONUP 0x0202;
return,

WM_lrBUTTONDOWN(byref wParam,byref lParam) {
	global ;global lbutton_cooldown, lbd, gpos, TrigG:= false
	static rECT:= VarSetCapacity(RECT,16)
	Coordmode,Mouse,window
	mousegetpos,mx,my,hwn,cnm
	if(instr(cnm,"Button")||instr(cnm,"edit")||instr(cnm,"static1"))
		return,
	timer("grace",-20)
	, ys:= hiword(lParam), xs:= loword(lParam), gpos:= wingetpos(hSpyWnd)
	While,LbD:=GetKeyState("lbutton","P") {
		DllCall("GetCursorPos","Uint",&RECT)
		vWinX:= NumGet(&RECT,0,"Int")-mX, vWinY:= NumGet(&RECT,4,"Int")-mY
	,	win_move(hSpyWnd,vWinX,vWiny,gpos.w,gpos.h,0x4001)
	,	if !TrigG
			settimer,disgrace,-150
	}
	return,(TrigG?ret:="":ret:=0)
	disgrace:
	   grace:
	   TrigG:= instr(a_thislabel,"dis")? False:True
	return,
}

WM_lrBUTTONup(wParam="",lParam="") { ;toggles maximise fill
	global TrigG, LbD:=""
	(!TrigG)? (return,""):()
}

SpyClose:
SpyEscape:
p:= GetWindowPlacement(hSpyWnd)
if(!FileExist(IniFile))
	FileAppend,% "[Settings]`n`n[Screenshot]",% IniFile,UTF-16
IniWrite,% p.x,% IniFile,Settings,x
IniWrite,% p.y,% IniFile,Settings,y
IniWrite,% g_DetectHidden,% IniFile,Settings,DetectHidden
IniWrite,% g_Minimize,% IniFile,Settings,CompactMode
IniWrite,% g_AlwaysOnTop,% IniFile,Settings,AlwaysOnTop
IniWrite,% g_ShowBorder,% IniFile,Screenshot,ShowBorder
IniWrite,% g_BorderColor,% IniFile,Screenshot,BorderColor
IniWrite,% g_BorderWidth,% IniFile,Screenshot,BorderWidth
ExitApp,

IsChild(hWnd) {
	WinGet,Style,Style,ahk_id %hWnd%
	return,Style &0x40000000 ;WS_CHILD
}

ShowWindowInfo(ClassNN:= "") {
	guiControl -g, EdtHandle

	if (IsChild(g_hWnd)) {
		LoadControlInfo(ClassNN)
	} else {
		LoadWindowInfo()
	}

	guiControl +gSetHandle, EdtHandle

	GoSub,LoadStyles
	GoSub,LoadClassInfo
	GoSub,LoadProperties
	GoSub,LoadExtraInfo
	GoSub,LoadWindowsTab

	guiControlGet Tab,, Tab, %hTab%
	TabHandler(Tab)

	GoSub,UpdateTitleBar
}

LoadWindowInfo() {
	gui,Spy:Default
	; Handle
	guiControl,,EdtHandle,% Format("0x{:X}",g_hWnd)
	; Title
	WinGetTitle Title,ahk_id %g_hWnd%
	guiControl,,EdtText,% Title
	guiControl,,TxtText,% "Title:"
	guiControl,,BtnSetText,% "Set Title"
	; Class
	WinGetClass,Class,ahk_id %g_hWnd%
	guiControl,,EdtClass,% Class
	guiControl,,EdtClassNN,% "N/A"
	; Style
	WinGet,g_Style,Style,ahk_id %g_hWnd%
	(((g_Style & 0x00FF0000)==0xCF0000)?  StyleInfo:= " (overlapped window)" : (g_Style &0x80880000? StyleInfo:= " (popup window)" : StyleInfo:= ""))
	guiControl,,EdtStyle,% Format("0x{:08X}",g_Style) . StyleInfo
	; Extended style
	WinGet,g_ExStyle,ExStyle, ahk_id %g_hWnd%
	guiControl,,EdtExStyle,% Format("0x{:08X}" g_ExStyle)
	; Position/size
	SetFormat Integer,D
	WinGetPos,X,Y,W,H, ahk_id %g_hWnd%
	wi:= GetWindowInfo(g_hWnd)
	guiControl,,EdtPosition,% X . ", " . Y . " (" . wi.ClientX . ", " . wi.ClientY . ")"
	guiControl,,EdtSize,% W . " x " . H . " (" . wi.ClientW . " x " . wi.ClientH . ")"
}

LoadControlInfo(ClassNN) {
	(ClassNN == ""? ClassNN:= GetClassNNEx(g_hWnd))
	gui,Spy:	Default
	SetFormat,	Integer,Hex
	; Handle
	guiControl,,EdtHandle,% Format("0x{:X}", g_hWnd)
	; Class
	WinGetClass,Class,ahk_id %g_hWnd%
	guiControl,,EdtClass,% Class
	; Control text
	ControlGetText,Text,,ahk_id %g_hWnd%
	guiControl,,EdtText,% 	Text
	guiControl,,TxtText, 	Text:
	guiControl,,BtnSetText,Set Text
	; ClassNN
	guiControl,,EdtClassNN,% ClassNN
	; Style
	ControlGet,	g_Style,Style,,,ahk_id %g_hWnd%
	guiControl,,EdtStyle,% g_Style
	; Extended style
	ControlGet,g_ExStyle,ExStyle,,,ahk_id %g_hWnd%
	guiControl,,EdtExStyle,% g_ExStyle
	; Position/Size
	SetFormat,Integer, D
	GetWindowPos(g_hWnd,X,Y,W,H)
	wi:= GetWindowInfo(g_hWnd)
	Pos:= X . ", " . Y ; Relative to parent

	hParent:= GetParent(g_hWnd)
	hAncestor:= GetAncestor(g_hWnd)
	if (hParent != hAncestor) {
		VarSetCapacity(RECT,16,0)
		DllCall("GetWindowRect","Ptr",g_hWnd,"Ptr",&RECT)
		DllCall("MapWindowPoints","Ptr",0,"Ptr",GetAncestor(g_hWnd),"Ptr",&RECT, "UInt", 1)
		AX:= NumGet(RECT,0,"Int")
		AY:= NumGet(RECT,4,"Int")
		Pos .= " (" . AX ", " . AY . ")" ; Relative to ancestor
	}
	guiControl,,EdtPosition,% Pos
	if(W!=wi.ClientW || H!=wi.ClientH) {
		guiControl,,EdtSize,% W . " x " . H . " (" . wi.ClientW . " x " . wi.ClientH . ")"
	} else,guiControl,,EdtSize,% W " x " H
	g_ExtraStyle:= GetExtraStyle(g_hWnd)
}

GetStatusBarText(hWnd) {
	hParentWnd:= GetParent(hWnd), SB_Text:= ""
	SendMessage,0x406,0,0,,ahk_id %hWnd% ;SB_GETPARTS
	Count:= ErrorLevel
	if(Count !="FAIL")
		Loop,% Count {
			StatusBarGetText,PartText,% A_Index,ahk_id %hParentWnd%
			SB_Text .=PartText . "|"
		}
	return,SubStr(SB_Text,1,-1)
}

TabHandler:
gui,Spy:Submit,NoHide
TabHandler(Tab)
return,

TabHandler(Tab) {
	global hCbxMsg
	switch,Tab {
		case "1","2": GoSub,LoadProcessProperties
		case "4"	: GoSub,LoadMessages
			WinSet,Redraw,,ahk_id %hCbxMsg%
}	}


StylesTabHandler:
if(A_guiEvent=="N") {
	Code:= NumGet(A_EventInfo +0,A_PtrSize *2,"Int")
	if(Code==-551) { ;TCN_SELCHANGE
		SendMessage,0x130B,0,0,,ahk_id %hStylesTab% ;TCM_GETCURSEL
		switch,nTab:= Errorlevel +1 {
			case "1": guiControl,Hide,ListBox3
				guiControl,Hide,ListBox2
				guiControl,Show,ListBox1
				guiControl,Hide,EdtExtraStyleSum
				guiControl,Hide,EdtExStyleSum
				guiControl,Show,EdtStyleSum
			case "2": guiControl,Hide,ListBox1
				guiControl,Hide,ListBox3
				guiControl,Show,ListBox2
				guiControl,Hide,EdtExtraStyleSum
				guiControl,Hide,EdtStyleSum
				guiControl,Show,EdtExStyleSum
			case "3": guiControl,Hide,ListBox1
				guiControl,Hide,ListBox2
				guiControl,Show,ListBox3
				guiControl,Hide,EdtStyleSum
				guiControl,Hide,EdtExStyleSum
				guiControl,Show,EdtExtraStyleSum
		}
		;Toolbarupdate(nTab)
}	}
return,

LoadStyles: ;Styles;
gui,Spy:Default
guiControl,,EdtStyleSum,% g_Style
guiControl,,EdtExStyleSum,% g_ExStyle
guiControl,,EdtExtraStyleSum,% g_ExtraStyle
WinGetClass Class,ahk_id %g_hWnd%
if(Class=="")
	return,
LoadStyles(Class, "ListBox1") ;Load control styles
if(Class=="ToolbarWindow32" || Class=="ReBarWindow32")
	LoadStyles("CommonControls","ListBox1",True)
LoadStyles("Window","ListBox1",True), LoadStyles("WindowEx","ListBox2")	;Load window styles
SendMessage,0x1308,2,0,,ahk_id %hStylesTab% ;TCM_DELETEITEM ;Delete the third tab
if(ErrorLevel==True) {
	guiControl,Hide,ListBox3
	guiControl,Show,ListBox1
	SendMessage,0x1330,0,0,,ahk_id %hStylesTab% ;TCM_SETCURFOCUS
	sleep,0
	SendMessage,0x130C,0,0,,ahk_id %hStylesTab% ;TCM_SETCURSEL
}
(Class=="ComboBox" && g_Style &0x10)? Class:= "ComboBoxEx" ;CBS_OWNERDRAWFIXED
switch,class {
	case "SysListView32","SysTreeView32","SysTabControl32","ToolbarWindow32","ComboBoxEx":
		Tab_AddItem(hStylesTab,RegExReplace(Class,"Sys|32|Control|Window") . " Extended Styles")
		LoadStyles(Class . "Ex","ListBox3")
	case "Button"		 :	Type:= WStyle &0xF,	WStyle &=~Type	;BS_TYPEMASK
	case "SysListView32" :	Type:= WStyle &0x3, WStyle &=~Type	;LVS_TYPEMASK
	case "Static" 		 :	Type:= WStyle &0x1F, WStyle &=~Type ;SS_TYPEMASK
}
ControlGet,Items,List,,,ahk_id %hLbxStyles%
Loop,Parse,Items,`n
{
	LStyle:= StrSplit(A_LoopField,"`t")[2]
	if(WStyle &LStyle || Type==LStyle) {
		WStyle &=~LStyle
		guiControl,Choose,% hLbxStyles,% A_Index
}	}
if(WStyle) {
	Leftover:= Format("0x{:08X}", WStyle)
	guiControl,,% hLbxStyles,% Leftover . "`t" . Leftover . "||"
}
SendMessage,0x115,6,0,,ahk_id %hLbxStyles% ;WM_VSCROLL, scroll to top
WinSet,Redraw,,ahk_id %hLbxStyles%
WExStyle:= g_ExStyle ;Extended styles
ControlGet,Items,List,,,ahk_id %hLbxExStyles%
Loop,Parse,Items,`n
{
	LExStyle:= StrSplit(A_LoopField,"`t")[2]
	if (WExStyle &LExStyle || LExStyle==0) {
		WExStyle &=~LExStyle
		guiControl,Choose,% hLbxExStyles,% A_Index
}	}
if(WExStyle) {
	Leftover:= Format("0x{:08X}",WExStyle)
	guiControl,,% hLbxExStyles,% Leftover . "`t" . Leftover . "||"
}
SendMessage,0x115,6,0,,ahk_id %hLbxExStyles% ;WM_VSCROLL, scroll to top
WinSet,Redraw,,ahk_id %hLbxExStyles%
ExtraStyle:= g_ExtraStyle ;Extra control styles (LV,TV,Toolbar,Tab)
ControlGet,Items,List,,,ahk_id %hLbxExtraStyles%
Loop,Parse,Items,`n
{
	LExtraStyle:= StrSplit(A_LoopField,"`t")[2]
	if (ExtraStyle &LExtraStyle || LExtraStyle==0) {
		ExtraStyle &=~LExtraStyle
		guiControl,Choose,% hLbxExtraStyles,% A_Index
}	}
return,

LoadStyles(IniSection,ListBox,Append:=False) {
	Static IniFile:= A_ScriptDir . "\Constants\Styles.ini"
	IniRead,Section,% IniFile,% IniSection
	Values:= "", Child:= (IniSection=="Window" && IsChild(g_hWnd))? True:False
	Loop,Parse,Section,`n
	{
		Fields:= StrSplit(A_LoopField,"|")
		Const:= Fields[1]
		if(Child && (Const=="WS_MAXIMIZEBOX"||Const=="WS_MINIMIZEBOX"||Const=="WS_OVERLAPPED"))
			Continue,
		if(!Child && (Const=="WS_TABSTOP"||Const =="WS_GROUP"))
			Continue,
		Values .= Const . "`t" . Fields[2] . "|"
		oStyles[Const]:= {"Value": Fields[2], "Desc": Fields[3]}
	}
	gui,Spy: Default
	guiControl,,% ListBox,% (Append)? Values : "|" . Values
}

LbxStylesHandler:
gui,Spy:Default
guiControlGet,hLbx,hWnd,% A_guiControl
guiControl,-AltSubmit,% hLbx
guiControlGet,Items,,% hLbx
Sum:= 0
Loop,Parse,Items,|
{
	StringSplit,Field,A_LoopField,`t
	Sum +=Field2
}
guiControl,,% StrReplace(A_guiControl,"Lbx","Edt") . "um",% Format("0x{:08X}",Sum) ;Style description
guiControl,+AltSubmit,% hLbx
SendMessage,0x188,0,0,,ahk_id %hLbx% ;LB_GETCURSEL
if (ErrorLevel != "FAIL") {
	Index:= ErrorLevel
	SendMessage,0x18A,%Index%,0,,ahk_id %hLbx% ;LB_GETTEXTLEN
	Len:= ErrorLevel
	VarSetCapacity(LB_Text,Len<< !!A_IsUnicode,0)
	SendMessage,0x189,%Index%,% &LB_Text,,ahk_id %hLbx% ;LB_GETTEXT
	Const:= StrSplit(StrGet(&LB_Text,Len),"`t")[1]
	Desc:= StrReplace(oStyles[Const].Desc,"\n", "`n")
	guiControl,,GrpDesc,%Const%
	guiControl,,TxtDesc,%Desc%
}
return,

ApplyStyle:
SendMessage,0x130B,0,0,,ahk_id %hStylesTab% ;TCM_GETCURSEL
nTab:= ErrorLevel + 1
if(nTab==1) {
	guiControlGet,Style,,EdtStyleSum
	WinSet,Style,% Style,ahk_id %g_hWnd%
	WinSet,Redraw,,ahk_id %g_hWnd%
} else,if(nTab==2) {
	guiControlGet,ExStyle,,EdtExStyleSum
	WinSet,ExStyle,% ExStyle,ahk_id %g_hWnd%
} else,if(nTab==3) {
	guiControlGet,ExtraStyle,,EdtExtraStyleSum
	WinGetClass,Class,ahk_id %g_hWnd%
	switch,Class {
		case "SysListView32"	: _msg:="0x1036"
		case "SysTreeView32"	: _msg:="0x112C"
		case "SysTabControl32"	: _msg:="0x1334"
		case "ToolbarWindow32"	: _msg:="0x0454"
		case "ComboBox"			: _msg:="0x040E"
	}
	sendmessage,% _msg,0,% ExtraStyle,,ahk_id %g_hWnd%	;CBEM_SETEXTENDEDSTYLE
	((errorlevel="Fail")? msgb0x(ErrorLevel,5))
}
DllCall("SetWindowPos","Ptr",g_hWnd,"UInt",0,"Int",0,"Int",0,"Int",0,"Int",0,"UInt",0x17)
WinSet,Redraw,,ahk_id %g_hWnd% ; 0x17 SWP_NOSIZE|SWP_NOMOVE|SWP_NOZORDER|SWP_NOACTIVATE
return,

ResetStyle:
nTab:= DllCall("SendMessage","Ptr",hStylesTab,"UInt",0x130B,"UInt",0,"UInt",0)+1
switch,nTab {
	case "1" : guiControl,Spy:,EdtStyleSum,% g_Style
	case "2" : guiControl,Spy:,EdtExStyleSum,% g_ExStyle
	case "3" : guiControl,Spy:,EdtExtraStyleSum,% g_ExtraStyle
}
msgbox % nTab
GoSub,LoadStyles
return,

GetExtraStyle(hWnd) {
	WinGetClass,Class,ahk_id %hWnd%
	switch,class {
		case "SysListView32"	: Message:= 0x1037	;LVM_GETEXTENDEDLISTVIEWSTYLE
		case "SysTreeView32"	: Message:= 0x112D	;TVM_GETEXTENDEDSTYLE
		case "SysTabControl32"	: Message:= 0x1335	;TCM_GETEXTENDEDSTYLE
		case "ToolbarWindow32"	: Message:= 0x455	;TB_GETEXTENDEDSTYLE
		case "ComboBox"			: Message:= 0x409	;CBEM_GETEXTENDEDSTYLE
	}
	SendMessage,% Message,0,0,,ahk_id %hWnd%
	return,Format("0x{:08X}",ErrorLevel)
}


SetHandle:
mousegetpos,,,hw,cn,3
EdtHandle2:= cn
winget,EdtHandle3,processpath,ahk_id %h%
guiControl,+gSetHandle,EdtHandle2
guiControl,+gSetHandle,EdtHandle3
gui,Spy:Submit,NoHide
((!Dragging&&WinExist("ahk_id " EdtHandle))
? g_hWnd:= EdtHandle,ShowWindowInfo())
return,

MenuHandler:
switch,A_ThisMenuItem {
	case "Always on Top": WinSet,AlwaysOnTop,Toggle,ahk_id %g_hWnd%
	case "Enabled" 		: DllCall("EnableWindow","Ptr",g_hWnd,"UInt",!IsWindowEnabled(g_hWnd))
	case "Visible" 		: ShowWindow(g_hWnd,!IsWindowVisible(g_hWnd))
	case "Close Window"	: WinClose,ahk_id %g_hWnd%
	case "Redraw Window": WinSet,Redraw,,ahk_id %g_hWnd%
}
return,

UpdateCommandsMenu() {
	global g_hWnd
	Visible:= IsWindowVisible(g_hWnd), Enabled:= IsWindowEnabled(g_hWnd)
	WinGet,ExStyle,ExStyle,ahk_id %g_hWnd%
	Menu,CommandsMenu,% (Visible)? "Check":"Uncheck",% "Visible"
	Menu,CommandsMenu,% (Enabled)? "Check":"Uncheck",% "Enabled"
	Menu,CommandsMenu,% (ExStyle &0x8)? "Check":"Uncheck",% "Always on Top" ;WS_EX_TOPMOST
	Menu,CommandsMenu,% (IsChild(g_hWnd))? "Disable":"Enable",% "Always on Top"
}

ShowCommandsMenu:
UpdateCommandsMenu()
Flags:= 0x8 ;TPM_TOPALIGN | TPM_RIGHTALIGN
WingetPos,wx,wy,ww,wh,ahk_id %hSpyWnd%
ControlGetPos,cx,cy,cw,ch,,ahk_id %hBtnCommands%
x:= wx+cx+cw, y:= wy+cy+ch
DllCall("TrackPopupMenu","Ptr",hCommandsMenu,"UInt",0x8,"Int"
,	x,"Int",y,"Int",0,"Ptr",hSpyWnd,"Ptr",0)
return,

SetText:
gui,Spy:Submit,NoHide
if(IsChild(g_hWnd))
	ControlSetText,,% EdtText,ahk_id %g_hWnd%
else,WinSetTitle,ahk_id %g_hWnd%,,% EdtText
return,

ShowBorder(hWnd,Duration:=500,Color:= "0x3FBBE3",r:= 3) {
	Local x,y,w,h,Index
	loop,1 {
		WinGetPos,x,y,w,h,ahk_id %hWnd%
		if(!w)
			return,
		g_Borders:= []
		Loop,4 {
			Index:= A_Index +90
			gui,%Index%:+hWndhBorder -Caption +ToolWindow +AlwaysOnTop -dpiscale
			gui,%Index%:Color,% Color
			g_Borders.Push(hBorder)
		}
		gui,91:Show,% "NA x" (x-r) " y" (y-r) " w" (w+r+r) " h" r ; Top
		gui,92:Show,% "NA x" (x-r) " y" (y+h) " w" (w+r+r) " h" r ; Bottom
		gui,93:Show,% "NA x" (x-r) " y" y " w" r " h" h ; Left
		gui,94:Show,% "NA x" (x+w) " y" y " w" r " h" h ; Right
		if(Duration !=-1) {
			Sleep,% Duration
			Loop,4 {
				Index:= A_Index +90
				gui,%Index%:Destroy
}	}	}	}

GetClassLong(hWnd,Param) {
	Static GetClassLong:= A_PtrSize==8? "GetClassLongPtr":"GetClassLong"
	return,DllCall(GetClassLong,"Ptr",hWnd,"Int",Param)
}

GetWindowLong(hWnd,Param) { ; GetWindowLong:= A_PtrSize == 8 ? "GetWindowLongPtr" : "GetWindowLong"
	return,DllCall("GetWindowLong","Ptr",hWnd,"Int",Param)
}

; Details
LoadClassInfo:
gui,ListView,% hClassInfo
LV_Delete()
SetFormat,Integer,H
WinGetClass,ClassName,ahk_id %g_hWnd%
ClassStyle:= GetClassLong(g_hWnd,-26)
LV_Add("","Class name",ClassName)
LV_Add("","Control ID",GetWindowLong(g_hWnd,-12))
LV_Add("","Font",GetFont())
LV_Add("","Window procedure",GetClassLong(g_hWnd,-24))
LV_Add("","Instance handle",GetClassLong(g_hWnd,-16))
LV_Add("","Class style",ClassStyle . GetClassStyles(ClassStyle))
LV_Add("","Icon handle",GetClassLong(g_hWnd,-14))
LV_Add("","Small icon handle",GetClassLong(g_hWnd,-34))
LV_Add("","Cursor handle",GetCursor(GetClassLong(g_hWnd,-12)))
LV_Add("","Background Brush",GetSysColorName(GetClassLong(g_hWnd,-10)-1))
LV_Add("","Menu name",GetClassLong(g_hWnd,-8))
LV_Add("","Window extra bytes",GetClassLong(g_hWnd,-18))
LV_Add("","Class extra bytes",GetClassLong(g_hWnd,-20))
LV_Add("","Class atom",GetClassLong(g_hWnd,-32))
LV_Add("","User data",GetWindowLong(g_hWnd,-21))
SetFormat,Integer,D
LV_Add("","Unicode",DllCall("IsWindowUnicode","Ptr",g_hWnd)? "Yes":"No")
LV_Add("","Tab order index",GetTabOrderIndex(g_hWnd))
LV_Add("","Help context ID",DllCall("GetWindowContextHelpId","Ptr",g_hWnd))
LV_Add("","Touch-capable",DllCall("IsTouchWindow","Ptr",g_hWnd,"Ptr",0))
return,

GetFont() {
	global FontName:= FontSize:= FontStyle:= ""
	Wingetclass,Class,ahk_id %g_hWnd%
	if(Class=="Scintilla") {
		FontName:= Scintilla_GetFont(g_hWnd)
		FontSize:= SendMsg(2485,32) ;SCI_STYLEGETSIZE,STYLE_DEFAULT
	} else {
		Control_GetFont(g_hWnd,FontName,FontSize,FontStyle)
		if(FontName==""||FontSize>1000)
			return,"System default"
	}
	FontInfo:= FontName . ", " . Format("{:d}",FontSize)
	(FontStyle !=""? FontInfo .=", " . FontStyle)
	return,FontInfo
}

Control_GetFont(hWnd,ByRef Name,ByRef Size,ByRef Style,IsGDIFontSize:= 0) {
	SendMessage 0x31,0,0,,ahk_id %hWnd% ;WM_GETFONT
	if(ErrorLevel=="FAIL")
		return,
	hFont:= Errorlevel
	VarSetCapacity(LOGFONT,LOGFONTSize:= 60 *(A_IsUnicode? 2:1))
	DllCall("GetObject","Ptr",hFont,"Int",LOGFONTSize,"Ptr",&LOGFONT)
	Name:= DllCall("MulDiv","Int",&LOGFONT +28,"Int",1,"Int",1,"Str")
	Style:= Trim((Weight:= NumGet(LOGFONT,16,"Int"))==700? "Bold":(Weight==400)? "": " w" . Weight
	. (NumGet(LOGFONT,20,"UChar")? " Italic":"")
	. (NumGet(LOGFONT,21,"UChar")? " Underline":"")
	. (NumGet(LOGFONT,22,"UChar")? " Strikeout":""))
	Size:= IsGDIFontSize? -NumGet(LOGFONT,0,"Int") : Round((-NumGet(LOGFONT,0,"Int") *72)/ A_ScreenDPI)
}

Scintilla_GetFont(hWnd) {
	WinGet,PID,PID,ahk_id %hWnd%
	if !(hProc:= DllCall("OpenProcess","UInt",0x438,"Int",False,"UInt",PID,"Ptr"))
		return,
	Address:= DllCall("VirtualAllocEx","Ptr",hProc,"Ptr",0,"UPtr",32,"UInt",0x1000,"UInt",4,"Ptr")
	SendMessage,2486,32,Address,,ahk_id %hWnd% ;SCI_STYLEGETFONT, STYLE_DEFAULT
	if(ErrorLevel !="FAIL") {	;LF_FACESIZE:= 32
		VarSetCapacity(FontName,32,0)
		DllCall("ReadProcessMemory","Ptr",hProc,"Ptr",Address,"Ptr",&FontName,"UPtr",32,"Ptr",0)
		FontName:= StrGet(&FontName,"UTF-8")
	}
	DllCall("VirtualFreeEx","Ptr",hProc,"Ptr",Address,"UPtr",0,"UInt",0x8000) ;MEM_RELEASE
	DllCall("CloseHandle","Ptr",hProc)
	return,FontName
}

Scintilla_GetLexerLanguage(hWnd) {
	WinGet,PID,PID,ahk_id %hWnd%
	if !(hProc:= DllCall("OpenProcess","UInt",0x438,"Int",False,"UInt",PID,"Ptr"))
		return,
	Sendmessage,4012,0,0,,ahk_id %hWnd% ;SCI_GETLEXERLANGUAGE
	BufferSize:= ErrorLevel
	Address:= DllCall("VirtualAllocEx","Ptr",hProc,"Ptr",0,"UPtr",BufferSize,"UInt",0x1000,"UInt",4,"Ptr")
	Sendmessage,4012,0,Address,,ahk_id %hWnd% ;SCI_GETLEXERLANGUAGE
	if(ErrorLevel !="FAIL") {
		VarSetCapacity(LexerName,BufferSize,0)
		DllCall("ReadProcessMemory","Ptr",hProc,"Ptr",Address,"Ptr",&LexerName,"UPtr",32,"Ptr",0)
		LexerName:= StrGet(&LexerName,"UTF-8")
	}
	DllCall("VirtualFreeEx","Ptr",hProc,"Ptr",Address,"UPtr",0,"UInt",0x8000) ;MEM_RELEASE
	DllCall("CloseHandle","Ptr",hProc)
	return,LexerName
}

GetClassStyles(Style) {
	Static CS:= {0x1: "CS_VREDRAW"
	, 0x2: "CS_HREDRAW"
	, 0x8: "CS_DBLCLKS"
	, 0x20: "CS_OWNDC"
	, 0x40: "CS_CLASSDC"
	, 0x80: "CS_PARENTDC"
	, 0x200: "CS_NOCLOSE"
	, 0x800: "CS_SAVEBITS"
	, 0x1000: "CS_BYTEALIGNCLIENT"
	, 0x2000: "CS_BYTEALIGNWINDOW"
	, 0x4000: "CS_GLOBALCLASS"
	, 0x10000: "CS_IME"
	, 0x20000: "CS_DROPSHADOW"}
	Styles:= " ("
	For,k,v in CS
		((Style &k)? Styles .= v ", ")
	return,RTrim(Styles, ", ") . ")"
}

LoadCursors() {
	Static Constants:= {"IDC_ARROW": 32512
		, "IDC_IBEAM": 32513
		, "IDC_WAIT": 32514
		, "IDC_CROSS": 32515
		, "IDC_UPARROW": 32516
		, "IDC_SIZENWSE": 32642
		, "IDC_SIZENESW": 32643
		, "IDC_SIZEWE": 32644
		, "IDC_SIZENS": 32645
		, "IDC_SIZEALL": 32646
		, "IDC_NO": 32648
		, "IDC_HAND": 32649
		, "IDC_APPSTARTING": 32650
		, "IDC_HELP": 32651}
	For,Key,Value in Constants {
		hCursor:= DllCall("LoadCursor","Ptr",0,"UInt",Value,"Ptr")
		Cursors[hCursor]:= Key
}	}


GetCursor(CursorHandle) {
	Cursor:= Cursors[CursorHandle]
	return,(Cursor !="")? Cursor:CursorHandle
}

GetTabOrderIndex(hWnd) {
	hParent:= GetAncestor(hWnd), Index:= 1
	WinGet,ControlList,ControlListHwnd,ahk_id %hParent%
	Loop,Parse,ControlList,`n
	{
		if(!IsWindowVisible(A_LoopField))
			Continue,
		WinGet,Style,Style,ahk_id %A_LoopField%
		if !(Style &0x10000) ;WS_TABSTOP
			Continue,
		if(A_LoopField==hWnd)
			return,Index
		Index++
	}
	return,0
}

Tab_AddItem(hTab,Text) {
	VarSetCapacity(TCITEM,16 +A_PtrSize *3,0)
	NumPut(0x1,TCITEM,0,"UInt") ;TCIF_TEXT
	NumPut(&Text,TCITEM,8 +A_PtrSize,"Ptr")
	SendMessage,0x1304,0,0,,ahk_id %hTab% ;TCM_GETITEMCOUNT
	SendMessage,0x133E,% ErrorLevel,&TCITEM,,ahk_id %hTab% ;TCM_INSERTITEMW
}

ShowDescription:
guiControlGet,Desc,,TxtDesc
guiControlGet,Const,,GrpDesc
gui,Desc:New,LabelDesc -SysMenu OwnerSpy
gui,Color,black
gui,Margin,10,0
gui,Add,CheckBox,x0 y0 w0 h0
gui,Add,Picture,x12 y12 w32 h32 Icon5,% "user32.dll"
gui,Font,s12 c0x003399,Segoe UI
gui,Add,Text,x58 y15 w473 h23 +0x200,% Const
gui,Font
gui,Font,s10,Segoe UI
gui,Add,Edit,vEdtDesc x55 y55 w444 Multi -VScroll -E0x200,% Desc
gui,Font
guicontrolGet,Pos,Pos,EdtDesc
py:= PosY +PosH +20
gui,Add,Text,hWndhFooter x-1 y%py% w533 h48 -Background
gui,Font,s9,Segoe UI
gui,Add,Button,gDescClose x432 yp+12 w88 h25 Default,% "&Close"
gui,Show,w531,Style Description
return,

DescEscape:
DescClose:
gui,Desc:Destroy
return,

; Messages
LoadMessages:
WinGetClass,Class,ahk_id %g_hWnd%
Constants:= GetMessages(Class)
gui,Spy:Default
guiControlGet,CurrentItem,,CbxMessages,Text
guiControl,,CbxMessages,|%Constants%
guiControl,Text,CbxMessages,% CurrentItem ; Common Control Messages
if(Class=="ToolbarWindow32"||Class=="ReBarWindow32")
	guiControl,,CbxMessages,% GetMessages("CommonControls")
(g_WinMsgs==""?	g_WinMsgs:= GetMessages("Window"))
guiControl,,CbxMessages,% g_WinMsgs
return,

GetMessages(Class) {
	Static IniFile:= A_ScriptDir . "\Constants\Messages.ini"
	if(Class=="")
		return,
	IniRead,Section,% IniFile,% Class
	Constants:= ""
	Loop,Parse,Section,`n
		Constants .=StrSplit(A_LoopField,"=")[1] . "|"
	Sort,Constants,D|
	return,Constants
}

SendMsg:
PostMsg:
gui,Spy:Submit,NoHide
Function:= (A_ThisLabel == "SendMsg")? "SendMessage":"PostMessage"
if CbxMessages is Not Number
	((SubStr(CbxMessages,1,3)=="WM_")? ClassName:= "Window" : 
	,	ClassName:= GetClassName(g_hWnd))
IniRead,Message,%A_ScriptDir%\Constants\Messages.ini,% ClassName,% CbxMessages
if (Message=="ERROR") {
	gui,Spy: +OwnDialogs
	MsgBox,0x10,% AppName,%CbxMessages%: invalid message.
	return,
} else,Message:= CbxMessages
DataTypes:= {"Number": "UPtr", "String": "WStr"}
wType:= DataTypes[wParamType], lType:= DataTypes[lParamType]
Result:= DllCall(Function,"Ptr",g_hWnd,"UInt",Message,wType,wParam,lType,lParam)
guiControl,,Result,% Result
return,

GoogleSearch:
guiControlGet,Message,,CbxMessages
if(Message=="")
	return,
if(SubStr(Message,1,3)=="SCI") {
	URL:= "http://www.scintilla.org/ScintillaDoc.html#"
	try,Run,%URL%%Message%
} else,try,Run,% URL:= googlelucky(Message) ;"https://www.google.com/search?q="
return,

CopyToClipboard:
gui,Spy:Default
CRLF:= "`r`n"
Output:= ""
if(Tab==1) { ;General
	gui,Spy:Submit,NoHide
	Output.="[General]" . CRLF
	Output.="Handle:`t" . EdtHandle . CRLF
	Output.="Text:`t" . EdtText . CRLF
	Output.="Class:`t" . EdtClass . CRLF
	Output.="ClassNN:`t" . EdtClassNN . CRLF
	Output.="Style:`t" . EdtStyle . CRLF
	Output.="Extended:`t" . EdtExStyle . CRLF
	Output.="Position:`t" . EdtPosition . CRLF
	Output.="Size:`t" . EdtSize . CRLF
	Output.="Cursor:`t" . EdtCursor . CRLF
}
else,if(Tab==2) { ; Styles
	if(g_Style) {
		guiControlGet,Styles,,% hLbxStyles
		Output .="[Styles]" . CRLF . StrReplace(Styles, "|", CRLF) . CRLF . CRLF
	}
	if(g_ExStyle) {
		guiControlGet,ExStyles,,% hLbxExStyles
		Output .="[ExStyles]" . CRLF . StrReplace(ExStyles, "|", CRLF) . CRLF . CRLF
	}
	if(g_ExtraStyle) {
		guiControlGet,ExtraStyles,,% hLbxExtraStyles
		Output .="[ExtraStyles]" . CRLF . StrReplace(ExtraStyles, "|", CRLF)
}	}
else,if(Tab==3) { ; Details
	ControlGet,ClassInfo,List,,,ahk_id %hClassInfo%
	ControlGet,PropInfo,List,,,ahk_id %hPropInfo%
	Output .= "[Details]" . CRLF . ClassInfo . CRLF . CRLF . "[Properties]" . CRLF . PropInfo
}
else,if(Tab==5) { ; Extra
	ControlGet,ExtraInfo,List,,,ahk_id %hExtraInfo%
	Output .= "[Extra]" . CRLF . ExtraInfo
}
else,if(Tab==6) { ; Windows
	ControlGet,Child,List,,,ahk_id %hChildList%
	if(Child != "")
		Output .= "[Child]" . CRLF . Child . CRLF . CRLF
	ControlGet,Sibling,List,,,ahk_id %hSiblingList%
	if (Sibling != "")
		Output .= "[Sibling]" . CRLF . Sibling . CRLF . CRLF
	guiControlGet,ParentLink,,ParentLink
	Output .= "Parent:`t" . RegExReplace(ParentLink, "\<\/?a\>") . CRLF
	guiControlGet,OwnerLink,,OwnerLink
	Output .= "Owner:`t" . RegExReplace(OwnerLink, "\<\/?a\>")
} else,if (Tab==7) { ; Process
	ControlGet,ProcInfo,List,,,ahk_id %hProcInfo%
	Output .= "[Process]" . CRLF . ProcInfo
}
Clipboard:= RTrim(Output,CRLF)
return,

ControlFromPoint(mx,my,hWnd) {
	((hParent:= GetParent(hWnd))==0? hParent:= hWnd)
	SmallerArea:= 999999999, hChildWnd:= 0
	WinGet,List,ControlListHwnd,ahk_id %hParent% ; EnumChildWindows
	Loop Parse,List,`n
	{
		VarSetCapacity(RECT,16,0)
		DllCall("GetWindowRect","Ptr",A_LoopField,"Ptr",&RECT)
		Left:= NumGet(RECT,0,"Int"), Right:= NumGet(RECT,8,"Int")
		Top:= NumGet(RECT,4,"Int"), Bottom:= NumGet(RECT,12,"Int")
		if((mx >= Left) && (mx <= Right) && (my >= Top) && (my <= Bottom)) {
			Area:= (Right -Left) *(Bottom -Top)  
			if(Area<SmallerArea) {
				SmallerArea:= Area, hChildWnd:= A_LoopField
	}	}	}
	return,(hChildWnd==0? hWnd:hChildWnd)
}

LoadProperties: ; Details tab
gui,Spy:ListView,% hPropInfo
LV_Delete()
Callback:= RegisterCallback("PropEnumProcEx","F")
DllCall("EnumPropsEx","Ptr",g_hWnd,"Ptr",Callback,"UInt",lParam:= 0)
return,

PropEnumProcEx(hWnd,lpszString,hData,dwData) {
	Global hPropInfo
	Property:= StrGet(lpszString,"UTF-16")
	(Property==""? Property:= lpszString . " (Atom)")
	gui,Spy:ListView,% hPropInfo
	LV_Add("",Property,Format("0x{:08X}",hData))
	return, True
}

LoadExtraInfo:
gui,Spy:ListView,% hExtraInfo
LV_Delete()
While(LV_GetText(foo, 0, 1))
	LV_DeleteCol(1)
WinGetClass,Class,ahk_id %g_hWnd%
if (Class=="Edit"||InStr(Class,"RICHEDIT")) {
	LV_InsertCol(1,"169","Property")
	LV_InsertCol(2,"169","Value")
	ControlGetText,Text,,ahk_id %g_hWnd%
	Length:= StrLen(Text) . " characters"
	ControlGet,Lines,LineCount,,,ahk_id %g_hWnd%
	ControlGet,CurLine,CurrentLine,,,ahk_id %g_hWnd%
	ControlGet,CurCol,CurrentCol,,,ahk_id %g_hWnd%
	LV_Add("","Length",Length)
	LV_Add("","Current line",CurLine)
	LV_Add("","Current column",CurCol)
	LV_Add("","Line count",Lines)
	LV_Add("","Text Limit",SendMsg(0xD5) . " bytes") ; EM_GETLIMITTEXT
	LV_Add("","Modified",{0: "False", 1: "True"}[SendMsg(0xB8)]) ; EM_GETMODIFY
} else,if (InStr(Class, "Scintilla")) {
	LV_InsertCol(1,"169","Property")
	LV_InsertCol(2,"169","Value")
	LexerName:= Scintilla_GetLexerLanguage(g_hWnd),	CodePage:= SendMsg(2137) ; SCI_GETCODEPAGE
	Pos:= SendMsg(2008), Line:= SendMsg(2166,Pos), Char:= SendMsg(2007,Pos)
	Size:= FormatBytes(SendMsg(2006),Sep,"B",0) . " bytes"
	SelSize:= FormatBytes(SendMsg(2161,0,0)-1,Sep,"B",0) . " bytes"
	LV_Add("","Lexer",SendMsg(4002) . (LexerName != ""? " (" . LexerName . ")" : "")) ;SCI_GETLEXER
	LV_Add("","Current position",Pos +1) ; SCI_GETCURRENTPOS
	LV_Add("","Char at position",Char . " (""" . Chr(Char) . """)") ; SCI_GETCHARAT
	LV_Add("","Style at position",SendMsg(2010,Pos)) ; SCI_GETSTYLEAT
	LV_Add("","Current line",Line +1) ; SCI_LINEFROMPOSITION
	LV_Add("","Position from line",SendMsg(2167,Line) +1) ; SCI_POSITIONFROMLINE
	LV_Add("","Line end position",SendMsg(2136,Line) +1) ; SCI_GETLINEENDPOSITION
	LV_Add("","Line length",SendMsg(2350,Line)) ; SCI_LINELENGTH
	LV_Add("","Current column",SendMsg(2129,Pos) +1) ; SCI_GETCOLUMN
	LV_Add("","Line count",SendMsg(2154)) ; SCI_GETLINECOUNT
	LV_Add("","Document size",Size) ; SCI_GETLENGTH
	LV_Add("","File encoding",(CodePage==65001? "UTF-8 (65001)" : CodePage)) ; SCI_GETCODEPAGE
	LV_Add("","Modified",SendMsg(2159)? "True":"False") ; SCI_GETMODIFY
	LV_Add("","Read only",SendMsg(2140)? "True":"False") ; SCI_GETREADONLY
	LV_Add("","Wrap mode",SendMsg(2269)) ; SCI_GETWRAPMODE
	LV_Add("","Tab width",SendMsg(2121)) ; SCI_GETTABWIDTH
	LV_Add("","Indent with spaces",!SendMsg(2125)? "True":"False") ; SCI_GETUSETABS
	LV_Add("","Show indentation guides",SendMsg(2133)? "True":"False") ; SCI_GETINDENTATIONguiDES
	LV_Add("", "EOL mode",{0: "CRLF",1: "CR",2: "LF"}[SendMsg(2030)]) ; SCI_GETEOLMODE
	LV_Add("", "Paste convert EOL",SendMsg(2468)? "True":"False") ; SCI_GETPASTECONVERTENDINGS
	LV_Add("", "Overtype mode",SendMsg(2187)? "1 (overtype)" : "0 (insert)") ; SCI_GETOVERTYPE
	LV_Add("", "Anchor position",SendMsg(2009) +1) ; SCI_GETANCHOR
	LV_Add("", "Selection start",SendMsg(2143) +1) ; SCI_GETSELECTIONSTART
	LV_Add("", "Selection end",SendMsg(2145) +1) ; SCI_GETSELECTIONEND
	LV_Add("", "Selected text length", SelSize) ; SCI_GETSELTEXT
	LV_Add("", "Selection mode",SendMsg(2423)) ; SCI_GETSELECTIONMODE
	LV_Add("", "Selection is rectangular",SendMsg(2372)? "True":"False") ; SCI_SELECTIONISRECTANGLE
	LV_Add("", "Virtual space options",SendMsg(2597)) ; SCI_GETVIRTUALSPACEOPTIONS
	LV_Add("", "Rectangular selection modifier",SendMsg(2599)) ; SCI_GETRECTANGULARSELECTIONMODIFIER
	; SCI_GETMOUSESELECTIONRECTANGULARSWITCH
	LV_Add("", "Mouse rectangular selection",SendMsg(2669)? "True":"False")
	LV_Add("", "Selection start line position",SendMsg(2424,Line) +1) ; SCI_GETLINESELSTARTPOSITION
	LV_Add("", "Selection end line position",SendMsg(2425,Line) +1) ; SCI_GETLINESELENDPOSITION
	LV_Add("", "Multiple selection",SendMsg(2564)? "True":"False") ; SCI_GETMULTIPLESELECTION
	; SCI_GETADDITIONALSELECTIONTYPING
	LV_Add("", "Additional selection typing",SendMsg(2566)? "True":"False")
	LV_Add("", "Multipaste",SendMsg(2615)) ; SCI_GETMULTIPASTE
	LV_Add("", "Line height",SendMsg(2279,Line)) ; SCI_TEXTHEIGHT
	LV_Add("", "Baseline extra ascent",SendMsg(2526)) ; SCI_GETEXTRAASCENT
	LV_Add("", "Baseline extra descent",SendMsg(2528)) ; SCI_GETEXTRADESCENT
	LV_Add("", "Lines on screen",SendMsg(2370)) ; SCI_LINESONSCREEN
	LV_Add("", "First visible line",SendMsg(2152) +1) ; SCI_GETFIRSTVISIBLELINE
	LV_Add("", "Current line wrap count",SendMsg(2235,Line)) ; SCI_WRAPCOUNT
	LV_Add("", "Mouse hover time",SendMsg(2265)) ; SCI_GETMOUSEDWELLTIME
	LV_Add("", "Word start position",SendMsg(2266,Pos,1) +1) ; SCI_WORDSTARTPOSITION
	LV_Add("", "Word end position",SendMsg(2267,Pos,1) +1) ; SCI_WORDENDPOSITION
	LV_Add("", "Autocomplete ignore case",SendMsg(2116)? "True":"False") ; SCI_AUTOCGETIGNORECASE
	LV_Add("", "Autocomplete list presorted",SendMsg(2661)) ; SCI_AUTOCGETORDER
	LV_Add("", "Autocomplete list max rows",SendMsg(2211)) ; SCI_AUTOCGETMAXHEIGHT
	LV_Add("", "Position before",SendMsg(2417,Pos) +1) ; SCI_POSITIONBEFORE
	LV_Add("", "Position after",SendMsg(2418,Pos) +1) ; SCI_POSITIONAFTER
	LV_Add("", "Current indicator",SendMsg(2501)) ; SCI_GETINDICATORCURRENT
	LV_Add("", "Target start",SendMsg(2191) +1) ; SCI_GETTARGETSTART
	LV_Add("", "Target end",SendMsg(2193) +1) ; SCI_GETTARGETEND
	LV_Add("", "Search flags",SendMsg(2199)) ; SCI_GETSEARCHFLAGS
	LV_Add("", "Error status",SendMsg(2383)) ; SCI_GETSTATUS
	LV_Add("", "Font quality",SendMsg(2612)) ; SCI_GETFONTQUALITY
	LV_Add("", "Technology (drawing API)",SendMsg(2631)) ; SCI_GETTECHNOLOGY
	LV_Add("", "Buffered drawing",SendMsg(2034)? "True":"False") ; SCI_GETBUFFEREDDRAW
	LV_Add("", "Zoom factor",SendMsg(2374)) ; SCI_GETZOOM
	LV_Add("", "Edge mode",SendMsg(2362)) ; SCI_GETEDGEMODE 
	LV_Add("", "Edge column",SendMsg(2360) +1) ; SCI_GETEDGECOLUMN
	LV_Add("", "Scroll width",SendMsg(2275)) ; SCI_GETSCROLLWIDTH
	LV_Add("", "Scroll width tracking",SendMsg(2517)? "True":"False") ; SCI_GETSCROLLWIDTHTRACKING
	LV_Add("", "End at last line",SendMsg(2278)? "True":"False") ; SCI_GETENDATLASTLINE
	LV_Add("", "View white space",SendMsg(2020)) ; SCI_GETVIEWWS
	LV_Add("", "White space size",SendMsg(2087)) ; SCI_GETWHITESPACESIZE
	LV_Add("", "View EOL characters",SendMsg(2355)? "True":"False") ; SCI_GETVIEWEOL
	LV_Add("", "Caret width",SendMsg(2189)) ; SCI_GETCARETWIDTH
	LV_Add("", "Caret blinking rate",SendMsg(2075) . " ms") ; SCI_GETCARETPERIOD
	LV_Add("", "Markers in current line",SendMsg(2046, Line)) ; SCI_MARKERGET
	LV_Add("", "Automatic fold",SendMsg(2664)) ; SCI_GETAUTOMATICFOLD
	LV_Add("", "All lines visible",SendMsg(2236)? "True":"False") ; SCI_GETALLLINESVISIBLE
	;LV_Add("", "", SendMsg()) ;
	Loop 5 { ; The maximum number of margins
		i:= A_Index -1
		LV_Add("", "Margin " . A_Index . " - type, width, mask"
		, SendMsg(2241,i) . ", " . SendMsg(2243,i) . ", " . SendMsg(2245,i))
		; SCI_GETMARGINTYPEN, SCI_GETMARGINWIDTHN, SCI_GETMARGINMASKN
	}
} else,if(Class=="ToolbarWindow32") {
	LV_InsertCol(1,"41","Index")
	LV_InsertCol(2,"85","Command ID")
	LV_InsertCol(3,"212","Button Text")
	Items:= GetToolbarItems(g_hWnd)
	For,Each,Item in Items
		LV_Add("",A_Index,Item.ID,Item.String)
} else,if(Class=="SysHeader32") {
	LV_InsertCol(1,"42","Index")
	LV_InsertCol(2,"48","Width")
	LV_InsertCol(3,"248","Text")
	Items:= GetHeaderInfo(g_hWnd)
	For,Each,Item in Items
		LV_Add("",A_Index,Item.Width,Item.Text)
} else,if(Class=="msctls_progress32") {
	LV_InsertCol(1,"169","Property")
	LV_InsertCol(2,"169","Value")
	LV_Add("","Range",SendMsg(0x407,1) . " - " . SendMsg(0x407,0)) ;PBM_GETRANGE
	LV_Add("","Position",SendMsg(0x408)) ;PBM_GETPOS
	LV_Add("","Step increment",SendMsg(0x40D)) ;PBM_GETSTEP
	LV_Add("","State",{1: "Normal", 2: "Error", 3: "Paused"}[SendMsg(0x411)]) ;PBM_GETSTATE
} else,if(Class ~="ListBox"||Class ~="ComboBox") {
	LV_InsertCol(1,"38","Line")
	LV_InsertCol(2,"300","Text")
	ControlGet,ItemList,List,,,ahk_id %g_hWnd%
	Loop,Parse,ItemList,`n
		LV_Add("",A_Index,A_LoopField)
}
else,if(Class=="msctls_statusbar32") {
	LV_InsertCol(1,"38", "Part")
	LV_InsertCol(2,"300","Text")
	SB_Text:= GetStatusBarText(g_hWnd)
	Loop,Parse,SB_Text,|
		LV_Add("", A_Index, A_LoopField)
}
else,if(Class=="SysTabControl32") {
	LV_InsertCol(1,"42","Index")
	LV_InsertCol(2,"296","Text")
	Tabs:= ControlGetTabs(g_hWnd)
	Loop,% Tabs.Length()
		LV_Add("",A_Index,Tabs[A_Index])
} else,if(Class=="SysListView32") {
	SendMessage,0x101F,0,0,,ahk_id %g_hWnd% ; LVM_GETHEADER
	hHeader:= ErrorLevel
	SendMessage,0x1200,0,0,,ahk_id %hHeader% ; HDM_GETITEMCOUNT
	Columns:= ErrorLevel +1
	Loop,% Columns {
		ColTitle:= A_Index==1? "Index":"Column " . A_Index -1
		LV_InsertCol(A_Index,"",ColTitle)
	}
	ControlGet,ItemList,List,,,ahk_id %g_hWnd%
	Loop,Parse,ItemList,`n
		Items:= StrSplit(A_LoopField,A_Tab)
		, LV_Add("",A_Index,Items*)
	Loop,% Columns
		LV_ModifyCol(A_Index,"AutoHdr")
}

; GetMenu return, value: if the window is a child window, the return, value is undefined.
if (!IsChild(g_hWnd) && hMenu:= GetMenu(g_hWnd))
	guiControl,Enable,% hBtnMenu
else,guiControl,Disable,% hBtnMenu
return,

SendMsg(Message,wParam:=0,lParam:=0) {
	SendMessage,% Message,% wParam,% lParam,,ahk_id %g_hWnd%
	return,ErrorLevel
}

Screenshot:
if(!WinExist("ahk_id" . g_hWnd)) {
	gui,Spy:+OwnDialogs
	MsgBox,0x40010,Error,Window no longer exists.
	return,
}
if(IsChild(g_hWnd)) {
	WinActivate,% "ahk_id" . GetAncestor(g_hWnd)
	Sleep,100
	if(g_ShowBorder) {
		ShowBorder(g_hWnd,-1,g_BorderColor,g_BorderWidth)
		Sleep.100
		Send,!{PrintScreen}
		Sleep,200
	} else,CaptureWindow(hSpyWnd,g_hWnd)
} else {
	WinActivate,ahk_id %g_hWnd%
	Sleep,100
	Send,!{PrintScreen}
}
Loop,4 {
	Index:= A_Index +90
	gui,%Index%:Destroy
}
WinActivate,ahk_id %hSpyWnd%
gui,Spy: +OwnDialogs
MsgBox,0x40040,% AppName,Content copied to the clipboard.
return,

CaptureWindow(hwndOwner,hwnd) {
	VarSetCapacity(RECT,16,0)
	DllCall("GetWindowRect","Ptr",hwnd,"Ptr",&RECT)
	width	:= NumGet(RECT,8,"Int") -NumGet(RECT,0,"Int")
	height	:= NumGet(RECT,12,"Int")-NumGet(RECT,4,"Int")
	hdc		:= DllCall("GetDC","Ptr",0,"Ptr")
	hdcMem	:= DllCall("CreateCompatibleDC","Ptr",hdc,"UPtr")
	hBmp	:= DllCall("CreateCompatibleBitmap","Ptr",hdc,"Int",width,"Int",height,"UPtr")
	hdcOld	:= DllCall("SelectObject","Ptr",hdcMem,"Ptr",hBmp)
	DllCall("BitBlt","Ptr",hdcMem,"Int",0,"Int",0,"Int",width,"Int",height,"Ptr",hdc,"Int"
	,Numget(RECT,0,"Int"),"Int",Numget(RECT,4,"Int"),"UInt",0x00CC0020) ;SRCCOPY
	DllCall("SelectObject","Ptr",hdcMem,"Ptr",hdcOld)
	DllCall("OpenClipboard","Ptr",hwndOwner) ; Clipboard owner
	DllCall("EmptyClipboard")
	DllCall("SetClipboardData","UInt",0x2,"Ptr",hBmp) ; CF_BITMAP
	DllCall("CloseClipboard")
	DllCall("ReleaseDC","Ptr",0,"Ptr",hdc)
	return,True
}

GetToolbarItems(hToolbar) {
	WinGet,PID,PID,ahk_id %hToolbar%
	if !(hProc:= DllCall("OpenProcess","UInt",0x438,"Int",False,"UInt",PID,"Ptr"))
		return,
	if(A_Is64bitOS)
		Try,DllCall("IsWow64Process","Ptr",hProc,"Int*",Is32bit:= true)
	else,Is32bit:= True
	RPtrSize:= Is32bit? 4:8
	TBBUTTON_SIZE:= 8 +(RPtrSize*3)
	SendMessage,0x418,0,0,,ahk_id %hToolbar% ; TB_BUTTONCOUNT
	ButtonCount:= ErrorLevel
	IDs:= [] ; Command IDs
	Loop,% ButtonCount {
		Address:= DllCall("VirtualAllocEx","Ptr",hProc,"Ptr",0,"UPtr"
		,	TBBUTTON_SIZE,"UInt",0x1000,"UInt",4,"Ptr")
		SendMessage,0x417,% A_Index -1,Address,,ahk_id %hToolbar% ; TB_GETBUTTON
		if (ErrorLevel==1) {
			VarSetCapacity(TBBUTTON,TBBUTTON_SIZE,0)
			DllCall("ReadProcessMemory","Ptr",hProc,"Ptr",Address,"Ptr"
			,	&TBBUTTON,"UPtr",TBBUTTON_SIZE,"Ptr",0)
			IDs.Push(NumGet(&TBBUTTON,4,"Int"))
		}
		DllCall("VirtualFreeEx","Ptr",hProc,"Ptr",Address,"UPtr",0,"UInt",0x8000) ; MEM_RELEASE
	}
	ToolbarItems:= []
	Loop,% IDs.Length() {
		ButtonID:= IDs[A_Index], BufferSize:= 128 ;SendMessage 0x44B,% ButtonID,0,,ahk_id %hToolbar% ;TB_GETBUTTONTEXTW ;BufferSize:= ErrorLevel *2
		Address:= DllCall("VirtualAllocEx","Ptr",hProc,"Ptr",0,"UPtr",BufferSize,"UInt",0x1000,"UInt",4,"Ptr")
		SendMessage,0x44B,% ButtonID,Address,,ahk_id %hToolbar% ; TB_GETBUTTONTEXTW
		VarSetCapacity(Buffer,BufferSize,0)
		DllCall("ReadProcessMemory","Ptr",hProc,"Ptr",Address,"Ptr",&Buffer,"UPtr",BufferSize,"Ptr",0)
		ToolbarItems.Push({"ID": IDs[A_Index],"String": Buffer})
		DllCall("VirtualFreeEx","Ptr",hProc,"Ptr",Address,"UPtr",0,"UInt",0x8000) ; MEM_RELEASE
	}
	DllCall("CloseHandle","Ptr",hProc)
	return,ToolbarItems
}

LoadWindowsTab:
GoSub,LoadChildList
GoSub,LoadSiblingList
hParent:= GetParent(g_hWnd)
ParentClass:= (hParent)? " (" GetClassName(hParent) . ")" : ""
ParentLink:= "<a>" . Format("0x{:08X}",hParent) . "</a>" . ParentClass
guiControl,Spy:,ParentLink,% ParentLink
hOwner:= GetOwner(g_hWnd)
OwnerClass:= (hOwner)? " (" GetClassName(hOwner) . ")" : ""
OwnerLink:= "<a>" . Format("0x{:08X}",hOwner) . "</a>" . OwnerClass
guiControl,Spy:,OwnerLink,% OwnerLink
return,

LinkToHandle:
guiControlGet,LinkText,Spy:,% A_guiControl
(RegExMatch(LinkText,"(0x\w+)",Match)? ShowWindowInfoIfExist(Match))
return,

WindowsTabHandler:
if(A_guiEvent=="N") {
	Code:= NumGet(A_EventInfo +0,A_PtrSize *2,"Int")
	if (Code==-551) { ; TCN_SELCHANGE
		SendMessage,0x130B,0,0,,ahk_id %hWindowsTab% ; TCM_GETCURSEL
		nTab:= Errorlevel +1
		if (nTab==1) {
			guiControl,Hide,% hSiblingList
			guiControl,Show,% hChildList
		} else {
			guiControl,Hide,% hChildList
			guiControl,Show,% hSiblingList
}	}	}
return,


; OnWM_KEYDOWN(wParam, lParam, msg, hWnd) {
	; Global
	; if (wParam == 112) { ; F1
		; GoSub ShowHelp
	; } else if (wParam == 113) { ; F2
		; if (hParent:= GetParent(g_hWnd)) {
			; g_hWnd:= hParent
			; ShowWindowInfo()
		; }
	; } else if (wParam == 114) { ; F3
		; GoSub ShowFindDlg
	; } else if (wParam == 115) { ; F4
		; GoSub ShowTree
	; } else if (wParam == 116) { ; F5
		; if (WinActive("ahk_id" . hTreeWnd)) {
			; return,
		; }
		; gui Spy: Submit, NoHide
		; ShowWindowInfoIfExist(EdtHandle)
	; } else if (wParam == 117) { ; F6
		; GoSub FlashWindow
	; } else if (wParam == 118) { ; F7
		; GoSub ShowXYWHDlg
	; } else if (wParam == 119) { ; F8
		; GoSub CopyToClipboard
	; } else if (wParam == 120) { ; F9
		; GoSub Screenshot
	; }
; }

OnWM_RBUTTONDOWN(wParam,lParam,msg,hWnd) {
	Global
	if(hWnd==hLbxStyles||hWnd==hLbxExStyles||hWnd==hLbxExtraStyles) {
		SendMessage,0x1A9,0,lParam,,ahk_id %hWnd% ; LB_ITEMFROMPOINT
		Index:= ErrorLevel
		SendMessage,0x18A,% Index,0,,ahk_id %hWnd% ; LB_GETTEXTLEN
		Len:= ErrorLevel
		VarSetCapacity(LB_Text,Len << !!A_IsUnicode,0)
		SendMessage,0x189,% Index,% &LB_Text,,ahk_id %hWnd% ; LB_GETTEXT
		Const:= StrSplit(StrGet(&LB_Text,Len),"`t")[1]
		Desc:= StrReplace(oStyles[Const].Desc,"\n","`n")
		guiControl,,GrpDesc,% Const
		guiControl,,TxtDesc,% Desc
}	}

OnWM_KEYDOWN(wParam,lParam,msg,hWnd) {
	Global
	static wmkeynit:= OnMessage(0x100,"OnWM_KEYDOWN")
	switch,wParam {
		case "112" : GoSub,ShowHelp						;F1
		case "113" : if(hParent:= GetParent(g_hWnd))	;F2
						g_hWnd:=hParent, ShowWindowInfo()
		case "114" : GoSub,ShowFindDlg					;F3
		case "115" : GoSub,ShowTree						;F4
		case "116" : If(WinActive("ahk_id" . hTreeWnd))	;F5
						return,
					gui,Spy:Submit,NoHide
					ShowWindowInfoIfExist(EdtHandle)
		case "117":	GoSub,FlashWindow		;F6
		case "118":	GoSub,ShowXYWHDlg		;F7
		case "119":	GoSub,CopyToClipboard	;F8
		case "120":	GoSub,Screenshot		;F9
}	}

OnWM_MOUSEMOVE(wParam,lParam,msg,hWnd) {
	global hOldWnd, g_hWnd
	if(Dragging) {
		loop,1 {
			MouseGetPos,x,y,hWin,hCtl,2
			g_hWnd:= (hCtl=="")? hWin:hCtl
			if(g_MouseCoordMode !="Screen") {
				SendMessage,0x84,0,% y<<16 |x,,ahk_id %hWnd% ;WM_NCHITTEST
				HitTest:= ErrorLevel
				((HitTest==1||hCtl !="")? (g_MouseCoordMode=="Client"? GetClientCoords(g_hWnd,x,y) 
				: (g_MouseCoordMode=="Window"? GetWindowCoords(g_hWnd,x,y)))) ; 1=HTCLIENT
			}	
			guiControl,Spy:,EdtCursor,%x%,%y%
			(g_DetectHidden? g_hWnd:= ControlFromPoint(x,y,g_hWnd))
			if(!(g_hWnd=hOldWnd) && !IsBorder(g_hWnd)) {
				ShowBorder(g_hWnd,-1)
				if(IsChild(g_hWnd)) {
					MouseGetPos,,,,ClassNN
					;LoadControlInfo(ClassNN)
				} ;else,LoadWindowInfo()
				settimer,UpdateTitleBar,-1
			}
			hOldWnd:= g_hWnd
}	}	}

OnWM_LBUTTONUP(wParam,lParam,msg,hWnd) {
	if(Dragging) {
		Dragging:= False
		sleep,140
		loop,1 {
			sleep,140
			DllCall("ReleaseCapture")
			DllCall("SetCursor","Ptr",hOldCursor)
			guiControl,,% hFindTool,% Bitmap1
			Loop,4 {
				Index:= A_Index +90
				gui,%Index%:Destroy
			}
			MouseGetPos,,,, ClassNN
			ShowWindowInfo()
			if(g_Minimized) {
				if(Workaround) {
					SendMessage,0x130C,1,0,,ahk_id %hTab% ; TCM_SETCURSEL
					SendMessage,0x1330,0,0,,ahk_id %hTab% ; TCM_SETCURFOCUS
					sleep,0
					SendMessage,0x130C,0,0,,ahk_id %hTab% ; TCM_SETCURSEL
					Workaround:= False
				}
				WinMove,ahk_id %hSpyWnd%,,,,,493
}	}	}	}

UpdateTitleBar:
WinGetClass,Class,ahk_id %g_hWnd%
hWnd:= Format("0x{:X}", g_hWnd)
WinSetTitle,ahk_id %hSpyWnd%,,% AppName " [" hWnd "," Class "]"
return,

ControlGetTabs(hTab) {
	Static MAX_TEXT_LENGTH:= 260
		 , MAX_TEXT_SIZE:= MAX_TEXT_LENGTH *(A_IsUnicode? 2:1)
	WinGet,PID,PID,ahk_id %hTab%
	if !(hProc:= DllCall("OpenProcess","UInt",0x438,"Int",False,"UInt",PID,"Ptr"))
		return,	; Open the process for read/write and query info.	; PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_VM_OPERATION | PROCESS_QUERY_INFORMATION
	if(A_Is64bitOS)
		Try,DllCall("IsWow64Process","Ptr",hProc,"Int*",Is32bit:= true)
	else,Is32bit:= True
	RPtrSize:= Is32bit? 4:8
	TCITEM_SIZE:= 16 +RPtrSize *3 ; Allocate a buffer in the (presumably) remote process.
	remote_item:= DllCall("VirtualAllocEx","Ptr",hProc,"Ptr",0
						 , "uPtr",TCITEM_SIZE +MAX_TEXT_SIZE
						 , "UInt",0x1000,"UInt",4,"Ptr") ; MEM_COMMIT, PAGE_READWRITE
	remote_text:= remote_item +TCITEM_SIZE
	VarSetCapacity(TCITEM,TCITEM_SIZE,0)
	NumPut(1,TCITEM,0,"UInt") ; mask (TCIF_TEXT) ; Prepare the TCITEM structure locally.
	NumPut(remote_text,TCITEM,8 +RPtrSize) ; pszText
	NumPut(MAX_TEXT_LENGTH,TCITEM,8 +RPtrSize *2,"Int") ; cchTextMax
	DllCall("WriteProcessMemory","Ptr",hProc,"Ptr",remote_item,"Ptr",&TCITEM,"UPtr",TCITEM_SIZE,"Ptr",0)	
	Tabs:= [] ;above; Write the local structure into the remote buffer^
	VarSetCapacity(TabText,MAX_TEXT_SIZE)
	SendMessage,0x1304,0,0,,ahk_id %hTab% ; TCM_GETITEMCOUNT
	Loop,% (ErrorLevel !="FAIL")? ErrorLevel:0 { ; Retrieve the item text.
		SendMessage,% (A_IsUnicode)? 0x133C:0x1305,A_Index -1,remote_item,,ahk_id %hTab% ; TCM_GETITEM
		if(ErrorLevel==1) { ; Success
			DllCall("ReadProcessMemory","Ptr",hProc,"Ptr",remote_text,"Ptr",&TabText,"UPtr",MAX_TEXT_SIZE,"Ptr",0)
		} else,TabText:= ""
		Tabs[A_Index]:= TabText
	}	; Release the remote memory and handle.
	DllCall("VirtualFreeEx","Ptr",hProc,"Ptr",remote_item,"UPtr",0,"UInt",0x8000) ; MEM_RELEASE
	DllCall("CloseHandle","Ptr",hProc)
	return,Tabs
}

ShowWindowInfoIfExist(hWnd) {
	if (IsWindow(hWnd)) {
		g_hWnd:= hWnd
		ShowWindowInfo()
	} else {
		gui,Spy: +OwnDialogs
		MsgBox,0x40010,% AppName,% "Invalid window handle."
}	}

GetHeaderInfo(hHeader) { ; return object containing the text and width of each item of a remote SysHeader32 control
	Static MAX_TEXT_LENGTH:= 260
	, MAX_TEXT_SIZE:= MAX_TEXT_LENGTH *(A_IsUnicode ? 2:1)
	WinGet,PID,PID,ahk_id %hHeader%
	if !(hProc:= DllCall("OpenProcess","UInt",0x438,"Int",False,"UInt",PID,"Ptr"))
		return,	; Open the process for read/write and query info ; PROCESS_VM_READ|PROCESS_VM_WRITE|PROCESS_VM_OPERATION|PROCESS_QUERY_INFORMATION
	if (A_Is64bitOS)
		Try,DllCall("IsWow64Process","Ptr",hProc,"Int*",Is32bit:= True)
	else,Is32bit:= True
	RPtrSize:= Is32bit? 4:8
	cbHDITEM:= (4 *6)+(RPtrSize *6)
	remote_item:= DllCall("VirtualAllocEx","Ptr",hProc,"Ptr",0	; Allocate a buffer in the remote process.
						 ,"UPtr",cbHDITEM +MAX_TEXT_SIZE
						 ,"UInt",0x1000,"UInt",4,"Ptr") ; MEM_COMMIT,PAGE_READWRITE
	remote_text:= remote_item +cbHDITEM
	VarSetCapacity(HDITEM,cbHDITEM,0)	; Prepare the HDITEM structure locally.
	NumPut(0x3,HDITEM,0,"UInt") ; mask HDI_WIDTH|HDI_TEXT
	NumPut(remote_text,HDITEM,8, "Ptr") ;pszText
	NumPut(MAX_TEXT_LENGTH,HDITEM,8 +RPtrSize *2,"Int") ;cchTextMax
	DllCall("WriteProcessMemory","Ptr",hProc,"Ptr",remote_item,"Ptr",&HDITEM,"UPtr",cbHDITEM,"Ptr",0)
	HDInfo:= {}	; Write the local structure into the remote buffer.
	VarSetCapacity(HDText,MAX_TEXT_SIZE)
	SendMessage,0x1200,0,0,,ahk_id %hHeader% ;HDM_GETITEMCOUNT
	Loop,% (ErrorLevel !="FAIL")? ErrorLevel:0 {
		SendMessage,% (A_IsUnicode)? 0x120B:0x1203,A_Index -1,remote_item,,ahk_id %hHeader% ;HDM_GETITEMW
		if(ErrorLevel==1) { ; Success ; Retrieve the item text.
			DllCall("ReadProcessMemory","Ptr",hProc,"Ptr",remote_item,"Ptr",&HDITEM,"UPtr",cbHDITEM,"Ptr",0)
			DllCall("ReadProcessMemory","Ptr",hProc,"Ptr",remote_text,"Ptr",&HDText,"UPtr",MAX_TEXT_SIZE,"Ptr",0)
		} else,HDText:= ""
		HDInfo.Push({"Width":NumGet(HDITEM,4,"UInt"),"Text":HDText})
	} ; Release the remote memory and handle.
	DllCall("VirtualFreeEx","Ptr",hProc,"Ptr",remote_item,"UPtr",0,"UInt",0x8000) ;MEM_RELEASE
	DllCall("CloseHandle","Ptr",hProc)	
	return,HDInfo
}

SetMouseCoordMode:
guiControlGet,g_MouseCoordMode,Spy:,MouseCoordMode
return,

GetClientCoords(hWnd,ByRef x,ByRef y) {
	VarSetCapacity(POINT,8,0)
	NumPut(x,POINT,0,"Int"), NumPut(y,POINT,4,"Int")
	hParent:= GetParent(hWnd)
	DllCall("ScreenToClient","Ptr",(hParent==0? hWnd:hParent),"Ptr",&POINT)
	x:= NumGet(POINT,0,"Int"), y:= NumGet(POINT,4,"Int")
}

GetWindowCoords(hWnd, ByRef x, ByRef y) {
	hParent:= GetParent(hWnd)
	WinGetPos,px,py,,,% "ahk_id" . (hParent==0? hWnd:hParent)
	x:= x -px, y:= y -py
}

FindToolHandler:
if(g_Minimize) {
	WinMove,ahk_id %hSpyWnd%,,,,,78
	g_Minimized:= True
}
Dragging:= True
guiControl,,% hFindTool,% Bitmap2
DllCall("SetCapture","Ptr",hSpyWnd)
hOldCursor:= DllCall("SetCursor","Ptr",hCrossHair,"Ptr")
return,


SetWindowIcon(hWnd, Filename, Index:= 1) {
	Local hSmIcon:= LoadPicture(Filename,"w16 Icon" . Index,ErrorLevel)
	SendMessage,0x80,0,hSmIcon,,ahk_id %hWnd% ; WM_SETICON, ICON_SMALL
	return,ErrorLevel
}

GetWindowPlacement(hWnd) {
	VarSetCapacity(WINDOWPLACEMENT,44,0)
	NumPut(44,WINDOWPLACEMENT)
	DllCall("GetWindowPlacement","Ptr",hWnd,"Ptr",&WINDOWPLACEMENT)
	Result:= {}
	Result.x:= NumGet(WINDOWPLACEMENT,7 *4,"UInt")
	Result.y:= NumGet(WINDOWPLACEMENT,8 *4,"UInt")
	Result.w:= NumGet(WINDOWPLACEMENT,9 *4,"UInt") -Result.x
	Result.h:= NumGet(WINDOWPLACEMENT,10 *4,"UInt") -Result.y
	Result.showCmd:= NumGet(WINDOWPLACEMENT,8,"UInt")	; 1 = normal, 2 = minimized, 3 = maximized
	return,Result
}

GetWindowInfo(hWnd) {
	NumPut(VarSetCapacity(WINDOWINFO,60,0),WINDOWINFO)
	DllCall("GetWindowInfo","Ptr",hWnd,"Ptr",&WINDOWINFO)
	wi:= Object()
	wi.WindowX:= NumGet(WINDOWINFO,4,"Int")
	wi.WindowY:= NumGet(WINDOWINFO,8,"Int")
	wi.WindowW:= NumGet(WINDOWINFO,12,"Int") -wi.WindowX
	wi.WindowH:= NumGet(WINDOWINFO,16,"Int") -wi.WindowY
	wi.ClientX:= NumGet(WINDOWINFO,20,"Int")
	wi.ClientY:= NumGet(WINDOWINFO,24,"Int")
	wi.ClientW:= NumGet(WINDOWINFO,28,"Int") -wi.ClientX
	wi.ClientH:= NumGet(WINDOWINFO,32,"Int") -wi.ClientY
	wi.Style  := NumGet(WINDOWINFO,36,"UInt")
	wi.ExStyle:= NumGet(WINDOWINFO,40,"UInt")
	wi.Active := NumGet(WINDOWINFO,44,"UInt")
	wi.BorderW:= NumGet(WINDOWINFO,48,"UInt")
	wi.BorderH:= NumGet(WINDOWINFO,52,"UInt")
	wi.Atom   := NumGet(WINDOWINFO,56,"UShort")
	wi.Version:= NumGet(WINDOWINFO,58,"UShort")
	return,wi
}

GetParent(hWnd) {
	return,DllCall("GetParent","Ptr",hWnd,"Ptr")
}

GetOwner(hWnd) {
	return,DllCall("GetWindow","Ptr",hWnd,"UInt",4,"Ptr") ; GW_OWNER
}

ShowWindow(hWnd,nCmdShow:= 1) {
	DllCall("ShowWindow","Ptr",hWnd,"Int",nCmdShow)
}

IsWindow(hWnd) {
	return,DllCall("IsWindow","Ptr",hWnd)
}

IsWindowVisible(hWnd) {
	return,DllCall("IsWindowVisible","Ptr",hWnd)
}

GetMenu(hWnd) {
	return,DllCall("GetMenu","Ptr",hWnd,"Ptr")
}

GetSubMenu(hMenu, nPos) {
	return,DllCall("GetSubMenu","Ptr",hMenu,"Int",nPos,"Ptr")
}

GetMenuItemCount(hMenu) {
	return,DllCall("GetMenuItemCount","Ptr",hMenu)
}

GetMenuItemID(hMenu, nPos) {
	return,DllCall("GetMenuItemID","Ptr",hMenu,"Int",nPos)
}

GetMenuString(hMenu,uIDItem) { ; uIDItem: the zero-based relative position of the menu item
	Local lpString, MenuItemID
	VarSetCapacity(lpString,4096)
	if !(DllCall("GetMenuString","Ptr",hMenu,"UInt",uIDItem,"Str",lpString,"Int",4096,"UInt",0x400)) {
		MenuItemID:= GetMenuItemID(hMenu,uIDItem)
		if(MenuItemID>-1)
			return,"SEPARATOR"
		else,return,(GetSubMenu(hMenu,uIDItem))? "SUBMENU":"ERROR"
	}
	return,lpString
}

GetClassName(hWnd) {
	WinGetClass,Class,ahk_id %hWnd%
	return,Class
}

GetFileIcon(File,SmallIcon:= 1) {
	VarSetCapacity(SHFILEINFO,cbFileInfo:= A_PtrSize +688)
	if(DllCall("Shell32.dll\SHGetFileInfoW"
					, "WStr",File
					, "UInt",0
					, "Ptr" ,&SHFILEINFO
					, "UInt",cbFileInfo
					, "UInt",0x100|SmallIcon)) { ;SHGFI_ICON
		return,NumGet(SHFILEINFO,0,"Ptr")
}	}

SetWindowPos(hWnd,x,y,w,h,hWndInsertAfter:= 0,uFlags:= 0x40) { ; SWP_SHOWWINDOW
	return,DllCall("SetWindowPos","Ptr",hWnd,"Ptr",hWndInsertAfter,"Int"
	,x,"Int",y,"Int",w,"Int",h,"UInt",uFlags)
}


GetScrollInfo(hWnd,fnBar:= 1) { ; fnbar: 0 = horizontal, 1 = vertical, 2 = hWnd is a scroll bar
	Local o:= {}
	NumPut(VarSetCapacity(SCROLLINFO,28,0),SCROLLINFO,0,"UInt")
	NumPut(0x1F,SCROLLINFO,4,"UInt") ; fMask: SIF_ALL
	DllCall("GetScrollInfo","Ptr",hWnd,"Int",fnBar,"Ptr",&SCROLLINFO)
	o.Min:= NumGet(SCROLLINFO,8,"Int"), o.Max := NumGet(SCROLLINFO,12,"Int")
	o.Page:= NumGet(SCROLLINFO,16,"UInt"), o.Pos := NumGet(SCROLLINFO,20,"Int")
	return,o
}

ShowScrollBarInfo:
V:= H:= "No"
WinGet,Style,Style,ahk_id %g_hWnd%
WinGetClass,Class,ahk_id %g_hWnd%
if(Class=="ScrollBar") {
	if (Style &1) { ; SBS_VERT
		V:= "Yes", VSB:= GetScrollInfo(g_hWnd,2)
	} else {
		H:= "Yes", HSB:= GetScrollInfo(g_hWnd,2)
	}
} else {
	(Style &0x200000? V:= "Yes") ; WS_VSCROLL
	(Style &0x100000? H:= "Yes") ; WS_HSCROLL
	HSB:= GetScrollInfo(g_hWnd,0), VSB:= GetScrollInfo(g_hWnd,1)
}
HPercent:= (HSB.Pos)? " (" . Round(HSB.Pos / (HSB.Max - HSB.Min) * 100) . "%)" : ""
VPercent:= (VSB.Pos)? " (" . Round(VSB.Pos / (VSB.Max - VSB.Min) * 100) . "%)" : ""

gui,ScrollInfo: New, LabelScrollInfo hWndhScrollInfo -MinimizeBox OwnerSpy
SetWindowIcon(hScrollInfo,ResDir . "\TreeIcons.icl",31)
gui,Font,s9,Segoe UI
gui,Color,black
gui,Add,CheckBox,w0 y0
gui,Add,GroupBox,x15 y13 w148 h152,% "Horizontal Scrollbar"
gui,Add,Text,x24 y32 w60 h23 +0x200,% "Visible:"
gui,Add,Edit,x86 y36 w60 h21 -E0x200,% H
gui,Add,Text,x24 y57 w60 h23 +0x200,% "Minimum:"
gui,Add,Edit,x86 y61 w60 h21 -E0x200,% HSB.Min
gui,Add,Text,x24 y82 w60 h23 +0x200,% "Maximum:"
gui,Add,Edit,x86 y86 w60 h21 -E0x200,% HSB.Max
gui,Add,Text,x24 y107 w60 h23 +0x200,% "Position:"
gui,Add,Edit,x86 y111 w70 h21 -E0x200,% HSB.Pos . HPercent
gui,Add,Text,x24 y132 w60 h23 +0x200,% "Page size:"
gui,Add,Edit,x86 y136 w60 h21 -E0x200,% HSB.Page
gui,Add,GroupBox,x178 y13 w148 h152,% "Vertical Scrollbar"
gui,Add,Text,x188 y32 w56 h23 +0x200,% "Visible:"
gui,Add,Edit,x250 y36 w60 h21 -E0x200,% V
gui,Add,Text,x188 y57 w56 h23 +0x200,% "Minimum:"
gui,Add,Edit,x250 y61 w60 h21 -E0x200,% VSB.Min
gui,Add,Text,x188 y82 w56 h23 +0x200,% "Maximum:"
gui,Add,Edit,x250 y86 w60 h21 -E0x200,% VSB.Max
gui,Add,Text,x188 y107 w56 h23 +0x200,% "Position:"
gui,Add,Edit,x250 y111 w70 h21 -E0x200,% VSB.Pos . VPercent
gui,Add,Text,x188 y132 w56 h23 +0x200,% "Page size:"
gui,Add,Edit,x250 y136 w60 h21 -E0x200,% VSB.Page
gui,Add,Text,x-1 y180 w343 h50 -Background +Border
gui,Add,Button,gScrollInfoClose x247 y193 w84 h24 +Default, &OK
WinGetPos,X,Y,,,ahk_id %hSpyWnd%
x += 30, y += 109
gui,Show,x%x% y%y% w341 h229,Scrollbars
return,

ScrollInfoClose:
ScrollInfoEscape:
gui,ScrollInfo:Destroy
return,

GetSysColorName(Value) {
	Static SysColors:= {0: "COLOR_SCROLLBAR"
	, 1: "COLOR_BACKGROUND"
	, 2: "COLOR_ACTIVECAPTION"
	, 3: "COLOR_INACTIVECAPTION"
	, 4: "COLOR_MENU"
	, 5: "COLOR_WINDOW"
	, 6: "COLOR_WINDOWFRAME"
	, 7: "COLOR_MENUTEXT"
	, 8: "COLOR_WINDOWTEXT"
	, 9: "COLOR_CAPTIONTEXT"
	, 10: "COLOR_ACTIVEBORDER"
	, 11: "COLOR_INACTIVEBORDER"
	, 12: "COLOR_APPWORKSPACE"
	, 13: "COLOR_HIGHLIGHT"
	, 14: "COLOR_HIGHLIGHTTEXT"
	, 15: "COLOR_BTNFACE"
	, 16: "COLOR_BTNSHADOW"
	, 17: "COLOR_GRAYTEXT"
	, 18: "COLOR_BTNTEXT"
	, 19: "COLOR_INACTIVECAPTIONTEXT"
	, 20: "COLOR_BTNHIGHLIGHT"
	, 21: "COLOR_3DDKSHADOW"
	, 22: "COLOR_3DLIGHT"
	, 23: "COLOR_INFOTEXT"
	, 24: "COLOR_INFOBK"
	, 26: "COLOR_HOTLIGHT"
	, 27: "COLOR_GRADIENTACTIVECAPTION"
	, 28: "COLOR_GRADIENTINACTIVECAPTION"
	, 29: "COLOR_MENUHILIGHT"
	, 30: "COLOR_MENUBAR"}
	Color:= SysColors[Value]
	return,(Color==""? Value:Color)
}

GetWindowPos(hWnd,ByRef X,ByRef Y,ByRef W,ByRef H) {
	VarSetCapacity(RECT,16,0)
	DllCall("GetWindowRect","Ptr",hWnd,"Ptr",&RECT)
	DllCall("MapWindowPoints","Ptr",0,"Ptr",GetParent(hWnd),"Ptr",&RECT,"UInt",2)
	X:= NumGet(RECT,0,"Int"), Y:= NumGet(RECT,4,"Int")
	w:= NumGet(RECT,8,"Int") -X, H:= NumGet(RECT,12,"Int") -Y
}


ChooseBorderColor:
g_BorderColorTemp:= g_BorderColor
if(ChooseColor(g_BorderColorTemp,hSettingsDlg))
	guiControl,Settings:+c%g_BorderColorTemp%,BorderColorPreview
return,

ChooseColor(ByRef Color,hOwner:= 0) {
	rgbResult:= ((Color &0xFF) <<16) +(Color &0xFF00) +((Color>>16) &0xFF)
	VarSetCapacity(CUSTOM,64,0)
	NumPut(VarSetCapacity(CHOOSECOLOR,A_PtrSize *9,0),CHOOSECOLOR,0)
	NumPut(hOwner,CHOOSECOLOR,A_PtrSize)
	NumPut(rgbResult,CHOOSECOLOR,A_PtrSize *3)
	NumPut(&CUSTOM,CHOOSECOLOR,A_PtrSize *4) ; COLORREF *lpCustColors
	NumPut(0x103,CHOOSECOLOR,A_PtrSize *5) ; Flags: CC_ANYCOLOR | CC_RGBINIT | CC_FULLOPEN
	RetVal:= DllCall("comdlg32\ChooseColorA","Str",CHOOSECOLOR)
	if(ErrorLevel != 0 || RetVal==0)
		return,False
	rgbResult:= NumGet(CHOOSECOLOR,A_PtrSize *3)
	Color:= (rgbResult &0xFF00) +((rgbResult &0xFF0000)>>16) +((rgbResult &0xFF)<<16)
	Color:= Format("0x{:06X}",Color)
	return,True
}

OnWM_SYSCOMMAND(wParam,lParam,msg,hWnd) {
	if(wParam==0xC0DE) {
		gui,Spy:+OwnDialogs
		MsgBox,0x40040,About,WincePie %Version%`nWindow information tool`n`nCredits:`n - MW (WinSpy++ developer)`n - Lexicos (AutoHotkey developer)
}	}

ShowFindDlg:
if (FindDlgExist) {
	gui,Find:Show
} else {
	gui,Find:New,LabelFind hWndhFindDlg
	gui,Font,s9,Segoe UI
	gui,Color,black
	gui,Add,Text,x15 y16 w81 h23 +0x200,% "Text or Title:"
	gui,Add,Edit,hWndhEdtFindByText vEdtFindByText gFindWindow x144 y17 w286 h21
	gui,Add,CheckBox,vChkFindRegEx x441 y16 w120 h23,% "Regular Expression"
	gui,Add,Text,x15 y54 w79 h23 +0x200,% "Class Name:"
	gui,Add,ComboBox,vCbxFindByClass gFindWindow x144 y54 w286
	gui,Add,Text,x15 y93 w110 h23 +0x200,% "Process ID or Name:"
	gui,Add,ComboBox,vCbxFindByProcess gFindWindow x144 y93 w286
	gui,Add,ListView,hWndhFindList gFindListHandler x10 y130 w554 h185 +LV0x14000
	, hWnd|Class|Text|Process
	LV_ModifyCol(1,0)
	LV_ModifyCol(2,133)
	LV_ModifyCol(3,285)
	LV_ModifyCol(4,112)
	gui,Add,Text,x-1 y329 w576 h49 +Border -Background
	gui,Add,Button,gFindOK x381 y342 w88 h25 Default,% "&OK"
	gui,Add,Button,gFindClose x477 y342 w88 h25,% "&Cancel"
	gui,Show,w574 h377,% "Find Window"
	SetExplorerTheme(hFindList), FindDlgExist:= True
}

; Unique class names
Global Classes:= []
WinGet,WinList, List
Loop,% WinList {
	hThisWnd:= WinList%A_Index%
	WinGetClass,WClass,ahk_id %hThisWnd%
	AddUniqueClass(WClass)
	WinGet,ControlList,ControlListHwnd,ahk_id %hThisWnd%
	Loop,Parse,ControlList,`n
	{
		WinGetClass,CClass,ahk_id %A_LoopField%
		AddUniqueClass(CClass)
}	}

ClassList:= ""
Loop,% Classes.Length()
	ClassList .= Classes[A_Index] . "|"
guiControl,,CbxFindByClass,% ClassList
Processes:= [] ; Unique process names
For Process in ComObjGet("winmgmts:").ExecQuery("Select * from Win32_Process") {
	if(Process.ProcessID<10)
		Continue
	Unique:= True
	Loop,% Processes.Length() {
		if(Process.Name==Processes[A_Index]) {
			Unique:= False
			Break,
	}	}
	(Unique? Processes.Push(Process.Name))
}

ProcList:= "", MaxItems:= Processes.Length()
Loop,% MaxItems
	ProcList .=Processes[MaxItems -A_Index +1] . "|"
guiControl,,CbxFindByProcess,% ProcList
return,

AddUniqueClass(ClassName) {
	Local Unique:= True
	Loop,% (Classes.Length()) {
		if(ClassName==Classes[A_Index]) {
			Unique:= False
			Break,
	}	}
	(Unique? Classes.Push(ClassName))
}

FindClose:
FindEscape:
gui,Find:Hide
return,

FindWindow:
gui,Find:Submit,NoHide
gui,ListView,% hFindList
guiControl,-Redraw,% hFindList
LV_Delete()
WinGet,WinList,List
Loop,% WinList {
	hThisWnd:= WinList%A_Index%
	if(hThisWnd==hFindDlg)
		Continue,
	WinGetClass,WClass,ahk_id %hThisWnd%
	WinGetTitle,WTitle,ahk_id %hThisWnd%
	WinGet,WProcess,ProcessName,ahk_id %hThisWnd%
	WinGet,WProcPID,PID,ahk_id %hThisWnd%
	((MatchCriteria(WTitle,WClass,IsNumber(CbxFindByProcess)? WProcPID:WProcess))?
	,	LV_Add("",hThisWnd,WClass,WTitle,WProcess))
	WinGet,ControlList,ControlListHwnd,ahk_id %hThisWnd%
	Loop,Parse,ControlList,`n
	{
		ControlGetText,CText,,ahk_id %A_LoopField%
		WinGetClass,CClass,ahk_id %A_LoopField%
		WinGet,CProcess,ProcessName,ahk_id %A_LoopField%
		WinGet,CProcPID,PID,ahk_id %A_LoopField%
		((MatchCriteria(CText,CClass,IsNumber(CbxFindByProcess)? CProcPID:CProcess))?
		,	LV_Add("",A_LoopField,CClass,CText,CProcess))
}	}

guiControl,+Redraw,% hFindList
return,

MatchCriteria(Text,Class,Process) {
	Global
	if(EdtFindByText !="") {
		if (ChkFindRegEx) {
			if(RegExMatch(Text,EdtFindByText)<1)
				return,False
		} else,if(!InStr(Text,EdtFindByText))
			return,False
	}
	if(CbxFindByClass !="" && !InStr(Class,CbxFindByClass))
		return,False
	if(CbxFindByProcess !="")
		return,IsNumber(Process)? CbxFindByProcess==Process : InStr(Process,CbxFindByProcess)
	return,True
}

FindOK:
gui,ListView,% hFindList
LV_GetText(hWnd,LV_GetNext())
guiControl,Spy:,EdtHandle,% hWnd
WinActivate,ahk_id %hSpyWnd%
gui,Find:Hide
return,

FindListHandler:
if(A_guiEvent=="DoubleClick")
	GoSub,FindOK
return,

CreateImageList() { ;"Generic window icon,Desktop (#32769),Dialog (#32770),Button,CheckBox,ComboBox,DateTime,Edit,GroupBox,Hotkey,Icon,Link,ListBox,ListView,MonthCal,Picture,Progress,Radio,RichEdit,Separator,Slider,Statusbar,Tab,Text,Toolbar,Tooltips,TreeView,UpDown,IE,Scintilla,ScrollBar,SysHeader"
	global TreeIcons
	ImageList:= IL_Create(32)
	loop,32
		IL_Add(ImageList,TreeIcons,a_index)
	return,ImageList
}

ShowTree:
if(WinExist("ahk_id" . hTreeWnd)) {
	gui,Tree:Show
	SetWindowIcon(hTreeWnd,"shell32.dll", 42)
} else {
	gui,Tree:New,LabelTree hWndhTreeWnd +Resize
	SetWindowIcon(hTreeWnd,"shell32.dll",42)
	Menu,TreeMenu,Add,&Reload`tF5,LoadTree
	Menu,TreeMenu,Add
	Menu,TreeMenu,Add,E&xit`tEsc,TreeClose
	Menu,MenuBar,Add,&Tree, :TreeMenu
	Menu,ViewMenu,Add,Show &Hidden Windows,ToggleHiddenWindows
	Menu,ViewMenu,Add
	Menu,ViewMenu,Add,&Flash Window`tF6,FlashWindow
	Menu,ViewMenu,Add
	Menu,ViewMenu,Add,E&xpand All Nodes,ExpandAll
	Menu,ViewMenu,Add,&Collapse All Nodes,CollapseAll
	Menu,MenuBar,Add,&View,:ViewMenu
	gui,Tree:Menu,MenuBar
	gui,Font,s9,Segoe UI
	gui,Add,TreeView,hWndhTree gTreeHandler x0 y0 w681 h445 -Lines +0x9000
	gui,Show,w681 h445,%AppName% - Tree
	TV_SetImageList(CreateImageList())
	SetExplorerTheme(hTree)
}
GoSub,LoadTree
return,

TreeClose:
TreeEscape:
gui,Tree:Hide
return,

TreeSize:
if (A_EventInfo == 1) ; Minimized
	return,
AutoXYWH("wh",hTree)
return,

LoadTree:
Global TreeIDs:= {}
gui,Tree:Default
TV_Delete()
RootID:= TV_Add("Desktop", 0, "Icon2")
TreeIDs[RootID]:= DllCall("GetDesktopWindow", "Ptr")
WinGet,WinList,List
Loop,% WinList {
	hWnd:= WinList%A_Index%
	WinGetClass,Class,ahk_id %hWnd%
	WinGetTitle,Title,ahk_id %hWnd%
	if(Title !="")
		Title:= " - " . Title
	Invisible:= !IsWindowVisible(hWnd)
	if(!g_TreeShowAll && Invisible)
		Continue,
	if(Invisible)
		Title .= " (hidden)"
	Icon:= GetWindowIcon(hWnd,Class,True)
	ID:= TV_Add(Class . Title,RootID,"Icon" . Icon)
	TreeIDs[ID]:= hWnd
	Tree(hWnd,ID)
}
TV_Modify(RootID,"+Expand")
For,Key,Value in TreeIDs
	(g_hWnd==Value? TV_Modify(Key,"Select"))
return,

Tree(hParentWnd,ParentID) {
	WinGet,WinList,ControlListHwnd,ahk_id %hParentWnd%
	Loop Parse,WinList, `n
	{
		if(GetParent(A_LoopField) !=hParentWnd)
			Continue,
		WinGetClass,Class,ahk_id %A_LoopField%
		if(IsChild(A_LoopField))
			ControlGetText,Text,,ahk_id %A_LoopField%
		else,WinGetTitle,Text,,ahk_id %A_LoopField%
		((Text != "")? Text:= " - " . Text)
		Invisible:= !IsWindowVisible(A_LoopField)
		if(!g_TreeShowAll && Invisible)
			Continue,
		(Invisible? Text .=" (hidden)")
		Icon:= GetWindowIcon(A_LoopField,Class)
		ID:= TV_Add(Class . Text,ParentID,"Icon" . Icon)
		TreeIDs[ID]:= A_LoopField
		Tree(A_LoopField,ID)
}	}

TreeHandler:
if(A_guiEvent=="DoubleClick") {
	g_hWnd:= TreeIDs[A_EventInfo]
	ShowWindowInfo()
}
return,

GetWindowIcon(hWnd,Class,TopLevel:= False) {
	Static Classes:= {0:0
	, "#32770": 3
	, "Button": 4
	, "CheckBox": 5
	, "ComboBox": 6
	, "SysDateTimePick32": 7
	, "Edit": 8
	, "GroupBox": 9
	, "msctls_hotkey32": 10
	, "Icon": 11
	, "SysLink": 12
	, "ListBox": 13
	, "SysListView32": 14
	, "SysMonthCal32": 15
	, "Picture": 16
	, "msctls_progress32": 17
	, "Radio": 18
	, "RebarWindow32": 25
	, "RichEdit": 19
	, "Separator": 20
	, "msctls_trackbar32": 21
	, "msctls_statusbar32": 22
	, "SysTabControl32": 23
	, "Static": 24
	, "ToolbarWindow32": 25
	, "tooltips_class32": 26
	, "SysTreeView32": 27
	, "msctls_updown32": 28
	, "Internet Explorer_Server": 29
	, "Scintilla": 30
	, "ScrollBar": 31
	, "SysHeader32": 32}
	if(Class=="Button") {
		WinGet,Style,Style,ahk_id %hWnd%
		Type:= Style &0xF
		((Type=7)? (Class:="GroupBox") : (((Type ~="2|3|5|6")? (Class:="CheckBox"):
		,	(((Type ~= "4|9")? (Class:= "Radio") : (Class:= "Button"))))))
	} else,if(Class="Static") {
		WinGet,0Style,Style,ahk_id %hWnd%
		Type:= Style &0x1F ;SS_TYPEMASK
		((Type==3)? (Class:= "Icon") : ((Type==14)? (Class:= "Picture"):
		,	(((Type==0x10)? (Class:= "Separator") : (Class:= "Static")))))
	} else,((InStr(Class,"RICHED",True)==1)? Class:= "RichEdit") ;RICHEDIT50W
	Icon:= Classes[Class]
	if(Icon !="")
		return,Icon
	SendMessage,0x7F,2,0,,ahk_id %hWnd% ;WM_GETICON,ICON_SMALL2
	hIcon:= ErrorLevel
	if(hIcon==0 && TopLevel) {
		WinGet,ProcessPath,ProcessPath,ahk_id %hWnd%
		hIcon:= GetFileIcon(ProcessPath)
	}
	IconIndex:= (hIcon)? IL_Add(ImageList,"HICON: " . hIcon) : 1
	return,IconIndex
}

ToggleHiddenWindows:
g_TreeShowAll:= !g_TreeShowAll
GoSub,LoadTree
Menu,ViewMenu,ToggleCheck,Show &Hidden Windows
return,

ExpandAll:
CollapseAll:
Expand:= (A_ThisLabel=="ExpandAll")? "+Expand":"-Expand"
ItemID:= 0
Loop {
	ItemID:= TV_GetNext(ItemID,"Full")
	if(!ItemID)
		Break,
	TV_Modify(ItemID,Expand)
}
return,

FlashWindow:
if(A_gui=="Tree")
	hWnd:= TreeIDs[TV_GetSelection()]
else,hWnd:= g_hWnd
loop,3
	ShowBorder(hWnd,200,0xFF0000)
	, Sleep,200
return,

ShowMenuViewer: ; Based on a script written by Lexicos
if(MenuViewerExist)
	gui,MenuViewer:Show
else {
	gui,MenuViewer:New, +LabelMenuViewer +hWndhMenuViewer +Resize
	gui,Font,s9,Segoe UI
	gui,Color,0x000000
	gui,Add,ListView,hWndhMenuList vLVMenu x0 y0 w600 h400 +LV0x14000,Menu Item String|Keyboard|Menu ID
	LV_ModifyCol(1,410)
	LV_ModifyCol(2,103)
	LV_ModifyCol(3,"65 Integer")
	SetExplorerTheme(hMenuList)
	gui,Add,Edit,hWndhEdtMenuSearch vEdtMenuSearch gSearchMenu x8 y408 w200 h23 +0x2000000 ; WS_CLIPCHILDREN
	DllCall("SendMessage","Ptr",hEdtMenuSearch,"UInt",0x1501,"Ptr",1,"WStr","Search")
	gui,Add,Picture,hWndhSearchIcon x178 y1 w16 h16,%ResDir%\Search.ico
	DllCall("SetParent","Ptr",hSearchIcon,"Ptr",hEdtMenuSearch)
	WinSet,Style,-0x40000000,ahk_id %hSearchIcon% ; -WS_CHILD
	ControlFocus,,ahk_id %hEdtMenuSearch%
	NoAmpersands:= True
	gui,Add,CheckBox,vNoAmpersands gShowMenuItems x220 y408 w167 h23 Checked%NoAmpersands%
	,Remove Ampersands (&&)
	gui,Add,Button,vBtnMenuCopy gCopyMenuList x466 y407 w125 h25,Copy to Clipboard
	gui,Show,w600 h440,Menu Viewer
	MenuViewerExist:= True
}
GoSub,ShowMenuItems
return,

ShowMenuItems:
gui,MenuViewer:Default
gui,Submit,NoHide
LV_Delete()
hMenu:= GetMenu(g_hWnd)
if (hMenu) {
	MenuItems:= []
	GetMenuItems(hMenu,"","")
}
return,

GetMenuItems(hMenu,Prefix,ByRef Commands) {
	Global
	ItemCount:= GetMenuItemCount(hMenu)
	Loop,% ItemCount {
		ItemString:= GetMenuString(hMenu,A_Index -1)
		ItemID:= GetMenuItemID(hMenu,A_Index -1)
		RegExMatch(ItemString,"\t(.+)",Keyboard)
		ItemString:= RegExReplace(ItemString,"\t.*")
		if (ItemString=="SEPARATOR") {
			ItemString:= "----------------------------"
		}
		MenuItems.Push([ItemString,Keyboard1,ItemID])
		(NoAmpersands? ItemString:= StrReplace(ItemString,"&"))
		LV_Add("",Prefix.ItemString,Keyboard1,ItemID)
		if(ItemID==-1) { ; Submenu
			hSubMenu:= GetSubMenu(hMenu,A_Index -1)
			if(hSubMenu) {
				Prefix .="		"
				GetMenuItems(hSubMenu,Prefix,Commands)
				Prefix:= StrReplace(Prefix,"		","",,1)
				Continue,
}	}	}	}

SearchMenu:
gui,MenuViewer:Submit,NoHide
gui,ListView,% hMenuList
LV_Delete()
Loop,% MenuItems.Length() {
	MenuItem:= MenuItems[A_Index][1]
	Keyboard:= MenuItems[A_Index][2]
	MenuID  := MenuItems[A_Index][3]
	(NoAmpersands? MenuItem:= StrReplace(MenuItem,"&"))
	if(InStr(MenuItem,EdtMenuSearch)
	|| InStr(Keyboard,EdtMenuSearch)
	|| InStr(MenuID, EdtMenuSearch))
		LV_Add("",MenuItem,Keyboard,MenuID)
}
return,

CopyMenuList:
gui,MenuViewer:Default
ControlGet,MenuList,List,,,ahk_id %hMenuList%
Clipboard:= StrReplace(MenuList,"		","`t")
return,

MenuViewerClose:
MenuViewerEscape:
gui,MenuViewer:Hide
return,

MenuViewerSize:
if(A_EventInf==1) ;Minimized
	return,
AutoXYWH("wh",hMenuList)
AutoXYWH("y", hEdtMenuSearch)
AutoXYWH("y", hSearchIcon)
AutoXYWH("y","NoAmpersands")
AutoXYWH("xy","BtnMenuCopy")
return,

MenuViewerContextMenu:
Row:= LV_GetNext()
LV_GetText(MenuString,Row,1), LV_GetText(MenuID,Row,3)
if(A_guiControl=="LVMenu" && MenuID>0 && !InStr(MenuString,"-----")) {
	Menu,MenuMenu,Add,% "Invoke Menu Command",InvokeMenuCommand
	Menu,MenuMenu,Show
}
return,

InvokeMenuCommand:
PostMessage,0x111,% MenuID,,,ahk_id %g_hWnd%
return,

LoadProcessProperties:
gui,Spy:Submit,NoHide
WinGet,PID,PID,ahk_id %g_hWnd%
StrQuery:= "SELECT * FROM Win32_Process WHERE ProcessId=" . PID
Enum:= ComObjGet("winmgmts:").ExecQuery(StrQuery)._NewEnum
if(Enum[Process]) {
	ExePath:= Process.ExecutablePath
	hIcon:= GetFileIcon(ExePath,0)
	if(!hIcon||ExePath=="")
		hIcon:= DllCall("LoadIcon","Ptr",0,"UInt",32512,"Ptr") ;IDI_APPLICATION
	guiControl,,ProgIcon,% "HICON:" . hIcon
	guiControl,,ProgName,% Process.Name
	FileGetVersion,ProgVer,% ExePath
	guiControl,,ProgVer,% ProgVer
	gui,ListView,% hProcInfo
	LV_Delete()
	LV_Add("","Path",ExePath)
	if instr(commandline:=Process.CommandLine,gizay:=quote(ExePath))
		args:= strreplace(commandline,gizay,"")
	else,args:=strreplace(commandline,ExePath,"")
	LV_Add("","Command line",Process.CommandLine)
	LV_Add("","Process ID",Process.ProcessId)
	LV_Add("","Thread ID",DllCall("GetWindowThreadProcessId","Ptr",g_hWnd,"Ptr",0))
	CreationDate:= Process.CreationDate
	SubStr(CreationDate,1,InStr(CreationDate,".") -1)
	FormatTime CreationDate,%CreationDate% D1 T0 ;Short date and time with seconds
	LV_Add("","Started",CreationDate)
	LV_Add("","Working Size",FormatBytes(Process.WorkingSetSize,Sep))
	LV_Add("","Virtual Size",FormatBytes(Process.VirtualSize,Sep))
	LV_Add("","Image Type",GetImageType(PID))
}
return,

SetExplorerTheme(hWnd) {
	DllCall("UxTheme.dll\SetWindowTheme","Ptr",hWnd,"WStr","Explorer","Ptr",0)
}

SetButtonIcon(hButton,File,Index:=1) {
	himl:= DllCall("ImageList_Create","Int",16,"Int",16,"UInt",0x20,"Int",1,"Int",1,"Ptr") ; ILC_COLOR32
	IL_Add(himl,File,Index)
	VarSetCapacity(BUTTON_IMAGELIST,20 +A_PtrSize,0)
	NumPut(himl,BUTTON_IMAGELIST,0,"Ptr")
	NumPut(4,BUTTON_IMAGELIST,16 +A_PtrSize,"UInt") ; Alignment (BUTTON_IMAGELIST_ALIGN_CENTER)
	SendMessage,0x1602,0,&BUTTON_IMAGELIST,,ahk_id %hButton% ; BCM_SETIMAGELIST
	return,ErrorLevel
}

GetImageType(PID) {	;PROCESS_QUERY_INFORMATION
	hProc:= DllCall("OpenProcess","UInt",0x400,"Int",False,"UInt",PID,"Ptr")
	if(!hProc)
		return,"N/A"
	if(A_Is64bitOS) ;Determines whether the specified process is running under WOW64.
		Try,DllCall("IsWow64Process","Ptr",hProc,"Int*",Is32Bit:= True)
	else,Is32Bit:= True
	DllCall("CloseHandle","Ptr",hProc)
	return,(Is32Bit)? "32-bit":"64-bit"
}

EndProcess:
guiControlGet,Filename,,ProgName
if(Filename=="N/A")
	return,
gui,Spy:+OwnDialogs
MsgBox,0x40031,% AppName,Are you sure you want to exit %Filename%?
IfMsgBox,OK, {
	WinGet,PID,PID,ahk_id %g_hWnd%
	Process,Close,% PID
	if(ErrorLevel==0) {
		gui,Spy:+OwnDialogs
		MsgBox,0x40010,% "Error",% "The process named %Filename% with PID %PID% could not be ended."
}	}
return,

OpenFolder:
gui,ListView,% hProcInfo
LV_GetText(ExePath,1,2)
if(ExePath !="")
	Run,*open explorer.exe /select`,"%ExePath%"
return,

FormatBytes(Value,sThousand:= ".",Unit:= -1,ShowUnit:= True) {
	if((Unit==-1 && Value>999) || Unit=="K") {
		Value /=1024, Unit:= ShowUnit? " K":""
	} else,Unit:= ShowUnit? " B":""
	a:= ""
	Loop,% StrLen(Value) {
		a .=SubStr(Value,1 -A_Index,1)
		(Mod(A_Index, 3)==0)? a .=sThousand : ()
	}
	a:= RTrim(a,sThousand), b:= ""
	Loop,% StrLen(a)
		b .=SubStr(a,1 -A_Index,1)
	return,b . Unit
}

LoadChildList:
gui,Spy:ListView,% hChildList
LV_Delete()
WinGet,ChildList,ControlListHwnd,ahk_id %g_hWnd%
Loop,Parse,ChildList,`n
{
	if(GetParent(A_LoopField) !=g_hWnd)
		Continue,
	WinGetClass,Class,ahk_id %A_LoopField%
	ControlGetText,Text,,ahk_id %A_LoopField%
	LV_Add("",Format("0x{:08X}",A_LoopField),Class,Text)
}
return,

LoadSiblingList:
gui,Spy:ListView,% hSiblingList
LV_Delete()
hParent:= GetParent(g_hWnd)
if(IsChild(g_hWnd)) {
	WinGet,SiblingList,ControlListHwnd,ahk_id %hParent%
	Loop,Parse,SiblingList, `n
	{
		if(A_LoopField==g_hWnd)
			Continue,
		if(GetParent(A_LoopField) !=hParent)
			Continue,
		WinGetClass,Class,ahk_id %A_LoopField%
		ControlGetText Text,,ahk_id %A_LoopField%
		LV_Add("",Format("0x{:08X}",A_LoopField),Class,Text)
	}
} else {
	WinGet,WinList,List,% (hParent==0)? "":"ahk_id " . hParent
	Loop,% WinList {
		hWnd:= WinList%A_Index%
		if(hWnd==g_hWnd)
			Continue,
		WinGetClass,Class,ahk_id %hWnd%
		WinGetTitle,Text,ahk_id %hWnd%
		LV_Add("",Format("0x{:08X}",hWnd),Class,Text)
}	}
return,

ChildListHandler:
SiblingListHandler:
gui,Spy:ListView,% (A_ThisLabel=="ChildListHandler")? hChildList:hSiblingList
((A_guiEvent !="ColClick")?	LV_GetText(hWnd,LV_GetNext())
,	ShowWindowInfoIfExist(hWnd))
return,

SetDHW:
g_DetectHidden:= !g_DetectHidden
return,

SetMinimize:
g_Minimize:= !g_Minimize
return,

ShowXYWHDlg:
gui,XYWH:New,LabelXYWH
gui,Font,s9,Segoe UI
gui,Color,black
gui,Add,GroupBox,x10 y6 w145 h105,% "Relative to:"
gui,Add,Radio,vClientCoords gSetXYWH x25 y27 w120 h23 +Checked,% "Client area"
gui,Add,Radio,vWindowCoords gSetXYWH x25 y51 w120 h23,% "Window border"
gui,Add,Radio,vScreenCoords gSetXYWH x25 y75 w120 h23,% "Screen coords"
gui,Add,GroupBox,x166 y5 w253 h105
gui,Add,Text,x182 y31 w26 h23 +0x200,% "X:"
gui,Add,Edit,vEdtX x209 y31 w70 h21
gui,Add,UpDown,gMoveWindow Range-64000-64000 +0x80
gui,Add,Text,x303 y31 w26 h23 +0x200,% "Y:"
gui,Add,Edit,vEdtY x330 y31 w70 h21
gui,Add,UpDown,gMoveWindow Range-64000-64000 +0x80
gui,Add,Text,x182 y69 w26 h23 +0x200,% "W:"
gui,Add,Edit,vEdtW x209 y69 w70 h21
gui,Add,UpDown,gMoveWindow Range-64000-64000 +0x80
gui,Add,Text,x303 y69 w26 h23 +0x200,% "H:"
gui,Add,Edit,vEdtH x330 y69 w70 h21
gui,Add,UpDown,gMoveWindow Range-64000-64000 +0x80
gui,Add,Text,x-1 y121 w460 h49 +0x200 -Background +Border
gui,Add,Button,gResetXYWH x9 y133 w88 h25,% "&Reset"
gui,Add,Button,gMoveWindow x235 y133 w88 h25 +Default,% "&Apply"
gui,Add,Button,gXYWHClose x331 y133 w88 h25,% "&Close"
gui,Show,w429 h170,% "Position and Size"
g_NewXYWH:= True
GoSub,SetXYWH
if(IsChild(g_hWnd)) {
	guiControl,Enable,ClientCoords
	guiControl,Enable,WindowCoords
	guiControl,Enable,ScreenCoords
} else {
	guiControl,Disable,ClientCoords
	guiControl,Disable,WindowCoords
	guiControl,Disable,ScreenCoords
	guiControl,,ScreenCoords,1
}
return,

XYWHClose:
XYWHEscape:
gui,XYWH:Destroy
return,

SetXYWH:
gui,XYWH:Submit,NoHide
if(IsChild(g_hWnd)) {
	if(ClientCoords)
		GetWindowPos(g_hWnd,X,Y,W,H)
	else,if(WindowCoords)
		ControlGetPos,X,Y,W,H,,ahk_id %g_hWnd%
	else,if(ScreenCoords)
		WinGetPos,X,Y,W,H,ahk_id %g_hWnd%
} else,WinGetPos,X,Y,W,H,ahk_id %g_hWnd%  ; Top-level window
guiControl,XYWH:,EdtX,% X
guiControl,XYWH:,EdtY,% Y
guiControl,XYWH:,EdtW,% W
guiControl,XYWH:,EdtH,% H
(g_NewXYWH?	g_BackupXYWH:= [X,Y,W,H], g_NewXYWH:= False)
return,

MoveWindow:
gui,XYWH:Submit,NoHide
if(IsChild(g_hWnd)) {
	if(ClientCoords)
		SetWindowPos(g_hWnd,EdtX,EdtY,EdtW,EdtH,0,0x14) ; SWP_NOACTIVATE|SWP_NOZORDER
	else,if(WindowCoords)
		ControlMove,,% EdtX,% EdtY,% EdtW,% EdtH,ahk_id %g_hWnd%
	else,if(ScreenCoords) {
		VarSetCapacity(POINT,8,0)
		NumPut(EdtX,POINT,0), NumPut(EdtY,POINT,4)
		DllCall("ScreenToClient","Ptr",GetParent(g_hWnd),"Ptr",&POINT) ; PARENT
		X:= NumGet(POINT,0), Y:= NumGet(POINT,4)
		SetWindowPos(g_hWnd,X,Y,EdtW,EdtH,0,0x14) ; SWP_NOACTIVATE | SWP_NOZORDER
	}
} else,WinMove,ahk_id %g_hWnd%,,% EdtX,% EdtY,% EdtW,% EdtH
WinSet,Redraw,,ahk_id %g_hWnd%
return,

ResetXYWH:
gui,XYWH:Submit,NoHide
if(IsChild(g_hWnd))
	guiControl,XYWH:,ClientCoords,1
guiControl,,EdtX,% g_BackupXYWH[1]
guiControl,,EdtY,% g_BackupXYWH[2]
guiControl,,EdtW,% g_BackupXYWH[3]
guiControl,,EdtH,% g_BackupXYWH[4]
GoSub,MoveWindow
return,

AutoXYWH(DimSize,cList*) {
	Static cInfo:= {}
	if(DimSize="reset")
		return,cInfo:= {}
	For,i,ctrl in cList {
		ctrlID:= A_gui ":" ctrl
		if(cInfo[ctrlID].x = "") {
			guiControlGet i,%A_gui%: Pos,% ctrl
			MMD:= InStr(DimSize,"*")? "MoveDraw":"Move"
			fx:= fy:= fw:= fh:= 0
			For,i,dim in (a:= StrSplit(RegExReplace(DimSize,"i)[^xywh]")))
				if(!RegExMatch(DimSize,"i)" . dim . "\s*\K[\d.-]+", f%dim%)) 
					f%dim%:= 1
			cInfo[ctrlID]:= {x: ix, fx: fx, y: iy, fy: fy, w: iw, fw: fw, h: ih, fh: fh
							, gw: A_guiWidth, gh: A_guiHeight, a: a, m: MMD}
		} else,if(cInfo[ctrlID].a.1) {
			dgx:= dgw:= A_guiWidth -cInfo[ctrlID].gw, dgy:= dgh:= A_guiHeight -cInfo[ctrlID].gh
			, Options:= ""
			For,i,dim in cInfo[ctrlID]["a"]
				Options .=dim . (dg%dim% *cInfo[ctrlID]["f" . dim] +cInfo[ctrlID][dim]) . A_Space
			guiControl,% A_gui ":" cInfo[ctrlID].m,% ctrl,% Options
}	}	}

IsBorder(hWnd) {
	Loop,% g_Borders.Length()
		if(g_Borders[ A_Index ]==hWnd) 
			return,True
	return,False
}

IsNumber(n) {
	if n Is Number
		return,True
	return,False
}

IsWindowEnabled(hWnd) {
	return,DllCall("IsWindowEnabled","Ptr",hWnd)
}

ShowHelp:
gui,Spy:+OwnDialogs
MsgBox,0x40,%AppName% Keyboard Shortcuts,
(
F2:  Go to the parent window
F3:  Show the Find dialog
F4:  Show the hierarchical window tree
F5:  Reload window information
F6:  Highlight window location
F7:  Position and Size dialog
F8:  Copy information to the clipboard
F9:  Copy screenshot to the clipboard
)
return,

ini_R:
IniRead,g_DetectHiddn,% IniFile,Settings,	DetectHiddn,0
IniRead,g_Minimize,%	IniFile,Settings,	CompactMode,0
IniRead,g_AlwaysOnTop,%	IniFile,Settings,	AlwaysOnTop,0
IniRead,g_ShowBorder,%	IniFile,Screenshot,	ShowBorder,	1
IniRead,g_BorderColor,%	IniFile,Screenshot,	BorderColor,0xFF0000
IniRead,g_BorderWidth,%	IniFile,Screenshot,	BorderWidth,4
		g_BorderColorTemp:= g_BorderColor
return,

ShowSettingsDlg:
gui,Settings:New,LabelSettings hWndhSettingsDlg -MinimizeBox OwnerSpy
SetWindowIcon(hSettingsDlg, ResDir . "\Settings.ico")
gui,Font,s9,Segoe UI
gui,Color,black
gui,Add,GroupBox,x8 y7 w319 h56,% AppName
gui,Add,CheckBox,vg_AlwaysOnTop x20 y27 w291 h23 Checked%g_AlwaysOnTop%
,%	"Show the window always on top"
gui,Add,GroupBox,x8 y69 w319 h152,Screenshot
gui,Add,Radio,% "x20 y88 w290 h23 " . (!g_ShowBorder? "Checked":"")
,%	"Capture the contents of the control only"
gui Add,Radio,vg_ShowBorder x20 y118 w290 h23 Checked%g_ShowBorder%
,%	"Display a border around the control"
gui,Add,Text,x36 y150 w78 h23 +0x200,% "Border color:"
gui,Add,Progress,vBorderColorPreview x119 y151 w23 h23 +0x800000 c%g_BorderColor%,100
gui,Add,Button,gChooseBorderColor x150 y150 w80 h24,% "Choose"
gui,Add,Text,x36 y183 w79 h23 +0x200,% "Border width:"
gui,Add,Edit,vg_BorderWidth x119 y184 w42 h21
gui,Add,UpDown,x159 y184 w18 h21,% g_BorderWidth
gui,Add,Text,x-1 y231 w338 h48 -Background +Border
gui,Add,Button,gApplySettings x152 y243 w84 h24 +Default,% "&OK"
gui,Add,Button,gSettingsClose x243 y243 w84 h24,% "&Cancel"
gui,Show,w335 h278,% "Settings"
return, 

SettingsClose:
SettingsEscape:
gui,Settings:Destroy
return,

ApplySettings:
gui,Settings:Submit
WinSet,AlwaysOnTop,% g_AlwaysOnTop? "On":"Off",ahk_id %hSpyWnd%
g_ShowBorder:= (g_ShowBorder==2)? 1:0
g_BorderColor:= g_BorderColorTemp
return,

manuallyTarget() {
	mousegetpos,x,y,g_hWnd,cw,3
	ShowWindowInfo(g_hWnd),	TT("Ok.")
}

GetAncestor(hWnd,Flag:= 2) { ; Flag: GA_PARENT=1,GA_ROOT=2,GA_ROOTOWNER=3 ;
	return,DllCall("GetAncestor","Ptr",hWnd,"UInt",Flag,"Ptr")
}

GetClassNNEx(hWnd) {
	hAncestor:= GetAncestor(hWnd), NN:= 0
	if(!hAncestor)
		return,
	WinGetClass,BaseClass,ahk_id %hWnd%
	WinGet,ControlList,ControlListHwnd,% "ahk_id " . hAncestor
	Loop,Parse,ControlList,`n
	{
		WinGetClass,Class,ahk_id %A_LoopField%
		if(Class==BaseClass) {
			NN++
			if(A_LoopField==hWnd)
				return,Class . NN
}	}	}

singleton_check(PID) {
	global AppName
	if(_:= winexist(AppName " ahk_class AutoHotkeyGUI")) {
		winget,pidNew,pid
		if(pid!=pidnew) {
			_:= Send_WMCOPYDATA("fadein","WinSpy.ahk ahk_class AutoHotkey")
			exitapp,

			loop,20
				sleep,40
}	}	}

Receive_WM_COPYDATA(wParam,lParam) {
	CopyOfData:= StrGet(StringAddress:= NumGet(lParam +(2* A_PtrSize)))
	switch,CopyOfData {
		case "fadein" : winhide,ahk_id %hSpyWnd%
			Win_Animate(hSpyWnd,"activate center",250)
	}
	return,True
}

; col() {
	; global
	; static go:= !false
	; winactive(hSpyWnd)? go:= true : go:= false
	; (go? (col:=181535,col2:="c220040", col3:="c99aafe") : (col:= 050513, col2:= "c200570", col3:="c6688aff"))
;;	Gui,spy:Color,%col%
	;;Gui,spy:Font,%col2% ;guicontrol,Font,text1 ;guicontrol,Font,text2
	; tt("col")
; }

activ8() {
	global
	if not winactive,ahk_id %hSpyWnd%
	{
		winhide,
		Win_Animate(hSpyWnd,"activate blend",2000)
		tt("bells")
}	}	;tt("ACTIVATE")

menHandl4:
switch,A_ThisMenuItem {
	case "Visible" : ShowWindow(g_hWnd,!IsWindowVisible(g_hWnd))
	case "Enabled" : DllCall("EnableWindow","Ptr",g_hWnd,"UInt",!IsWindowEnabled(g_hWnd))
	case "Always on Top": WinSet,AlwaysOnTop,Toggle,ahk_id %g_hWnd%
	case "Close Window" : WinClose,ahk_id %g_hWnd%
	case "Redraw Window": WinSet,Redraw,,ahk_id %g_hWnd%
}
return,

Menuz:
Menu,Tray,Icon
Menu,Tray,Icon,% "C:\Icon\48_24\WINSPY48_24.ico"
Menu,Tray,noStandard
menu,Tray,add,Open Script Folder,% "Open_Script_Location"
menu,tray,standard
return,

Varz:
global hOldWnd
,AppName
,Version:= "1.0.3"
,IniFile:= AppName . ".ini"
,ResDir:= A_ScriptDir . "\Resources"
,Bitmap1:= "inj4.png"
, hCrossHair:= DllCall("LoadImage","Int",0
, "Str",ResDir . "\CrossHair.cur"
, "Int",2 ; IMAGE_CURSOR
, "Int",32,"Int",32
, "UInt",0x10,"Ptr") ; LR_LOADFROMFILE
,hOldCursor
,hTreeWnd:= pbanner_yoff:= 0
,hCommandsMenu
,hTab,hCbxMsg,htb
,hStylesTab,hWindowsTab,hFindTool
,g_hWnd,hSpyWnd
,g_Style,g_ExStyle,g_ExtraStyle
,g_Minimized,g_Minimize,g_DetectHiddn,g_AlwaysOnTop 
,g_MouseCoordMode:= "Screen"
,g_Borders:= []
,g_WinMsgs:= ""
,Cursors:= {}
,oStyles:= {}
,Dragging:= False
,Workaround:= True
,FindDlgExist:= False
,g_TreeShowAll:= False
,MenuViewerExist:= False
,TreeIcons:= ResDir . "\TreeIcons.icl"
,SYSGUI_TBbUTTSZ:= 64
,ImageList,args
return,

Open_Script_Location: ;run %a_scriptDir%
toolTip,% a_scriptFullPath
E=explorer.exe /select,%a_scriptFullPath%
run,%comspec% /C %E%,,hide
return,

exitfunc() {
	Win_Animate(hSpyWnd,"hide blend",1200)
}